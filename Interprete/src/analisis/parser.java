
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analisis;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import abstracto.Instruccion;
import simbolo.Tipo;
import simbolo.tipoDato;
import excepciones.Errores;
import instrucciones.Print;
import instrucciones.Declaracion;
import instrucciones.AsignacionVar;
import instrucciones.If;
import instrucciones.For;
import instrucciones.Break;
import instrucciones.Continue;
import instrucciones.While;
import instrucciones.DoWhile;
import instrucciones.DeclaracionVec;
import expresiones.Nativo;
import expresiones.Aritmeticas;
import expresiones.OperadoresAritmeticos;
import expresiones.Relacionales;
import expresiones.OperadoresRelacionales;
import expresiones.AccesoVar;
import expresiones.Logicos;
import expresiones.OperadoresLogicos;
import expresiones.AccesoVec;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\075\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\004\000\002\005" +
    "\007\000\002\006\011\000\002\010\015\000\002\023\005" +
    "\000\002\023\003\000\002\022\003\000\002\022\003\000" +
    "\002\007\006\000\002\011\011\000\002\014\014\000\002" +
    "\015\005\000\002\016\004\000\002\017\004\000\002\012" +
    "\011\000\002\013\013\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\021\004\000\002\021\005\000\002\021\005\000\002" +
    "\021\005\000\002\021\005\000\002\021\005\000\002\021" +
    "\005\000\002\021\006\000\002\021\005\000\002\021\005" +
    "\000\002\021\005\000\002\021\005\000\002\021\005\000" +
    "\002\021\004\000\002\021\005\000\002\021\005\000\002" +
    "\021\005\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\006\000\002\021\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\213\000\030\003\025\007\017\012\015\034\026\035" +
    "\033\040\016\042\010\043\020\051\031\056\024\057\006" +
    "\001\002\000\034\002\ufff5\003\ufff5\007\ufff5\012\ufff5\034" +
    "\ufff5\035\ufff5\040\ufff5\042\ufff5\043\ufff5\045\ufff5\051\ufff5" +
    "\056\ufff5\057\ufff5\001\002\000\034\002\ufffe\003\ufffe\007" +
    "\ufffe\012\ufffe\034\ufffe\035\ufffe\040\ufffe\042\ufffe\043\ufffe" +
    "\045\ufffe\051\ufffe\056\ufffe\057\ufffe\001\002\000\004\011" +
    "\215\001\002\000\034\002\ufff7\003\ufff7\007\ufff7\012\ufff7" +
    "\034\ufff7\035\ufff7\040\ufff7\042\ufff7\043\ufff7\045\ufff7\051" +
    "\ufff7\056\ufff7\057\ufff7\001\002\000\004\017\207\001\002" +
    "\000\034\002\ufff4\003\ufff4\007\ufff4\012\ufff4\034\ufff4\035" +
    "\ufff4\040\ufff4\042\ufff4\043\ufff4\045\ufff4\051\ufff4\056\ufff4" +
    "\057\ufff4\001\002\000\034\002\ufffc\003\ufffc\007\ufffc\012" +
    "\ufffc\034\ufffc\035\ufffc\040\ufffc\042\ufffc\043\ufffc\045\ufffc" +
    "\051\ufffc\056\ufffc\057\ufffc\001\002\000\032\002\000\003" +
    "\025\007\017\012\015\034\026\035\033\040\016\042\010" +
    "\043\020\051\031\056\024\057\006\001\002\000\034\002" +
    "\ufff9\003\ufff9\007\ufff9\012\ufff9\034\ufff9\035\ufff9\040\ufff9" +
    "\042\ufff9\043\ufff9\045\ufff9\051\ufff9\056\ufff9\057\ufff9\001" +
    "\002\000\004\017\203\001\002\000\004\017\175\001\002" +
    "\000\004\031\172\001\002\000\004\044\162\001\002\000" +
    "\034\002\ufff6\003\ufff6\007\ufff6\012\ufff6\034\ufff6\035\ufff6" +
    "\040\ufff6\042\ufff6\043\ufff6\045\ufff6\051\ufff6\056\ufff6\057" +
    "\ufff6\001\002\000\034\002\ufffb\003\ufffb\007\ufffb\012\ufffb" +
    "\034\ufffb\035\ufffb\040\ufffb\042\ufffb\043\ufffb\045\ufffb\051" +
    "\ufffb\056\ufffb\057\ufffb\001\002\000\034\002\ufffa\003\ufffa" +
    "\007\ufffa\012\ufffa\034\ufffa\035\ufffa\040\ufffa\042\ufffa\043" +
    "\ufffa\045\ufffa\051\ufffa\056\ufffa\057\ufffa\001\002\000\004" +
    "\011\161\001\002\000\004\011\160\001\002\000\004\007" +
    "\uffed\001\002\000\004\007\133\001\002\000\034\002\ufff8" +
    "\003\ufff8\007\ufff8\012\ufff8\034\ufff8\035\ufff8\040\ufff8\042" +
    "\ufff8\043\ufff8\045\ufff8\051\ufff8\056\ufff8\057\ufff8\001\002" +
    "\000\004\017\036\001\002\000\034\002\ufffd\003\ufffd\007" +
    "\ufffd\012\ufffd\034\ufffd\035\ufffd\040\ufffd\042\ufffd\043\ufffd" +
    "\045\ufffd\051\ufffd\056\ufffd\057\ufffd\001\002\000\004\007" +
    "\uffec\001\002\000\004\002\035\001\002\000\004\002\001" +
    "\001\002\000\004\007\017\001\002\000\026\004\040\005" +
    "\044\006\041\007\047\010\052\017\045\022\042\036\043" +
    "\037\046\063\050\001\002\000\050\011\uffcb\020\uffcb\021" +
    "\uffcb\022\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb\031\uffcb" +
    "\033\uffcb\047\uffcb\050\uffcb\052\uffcb\053\uffcb\054\uffcb\055" +
    "\uffcb\060\uffcb\061\uffcb\062\uffcb\001\002\000\050\011\uffcc" +
    "\020\uffcc\021\uffcc\022\uffcc\024\uffcc\025\uffcc\026\uffcc\027" +
    "\uffcc\031\uffcc\033\uffcc\047\uffcc\050\uffcc\052\uffcc\053\uffcc" +
    "\054\uffcc\055\uffcc\060\uffcc\061\uffcc\062\uffcc\001\002\000" +
    "\026\004\040\005\044\006\041\007\047\010\052\017\045" +
    "\022\042\036\043\037\046\063\050\001\002\000\050\011" +
    "\uffc9\020\uffc9\021\uffc9\022\uffc9\024\uffc9\025\uffc9\026\uffc9" +
    "\027\uffc9\031\uffc9\033\uffc9\047\uffc9\050\uffc9\052\uffc9\053" +
    "\uffc9\054\uffc9\055\uffc9\060\uffc9\061\uffc9\062\uffc9\001\002" +
    "\000\050\011\uffcd\020\uffcd\021\uffcd\022\uffcd\024\uffcd\025" +
    "\uffcd\026\uffcd\027\uffcd\031\uffcd\033\uffcd\047\uffcd\050\uffcd" +
    "\052\uffcd\053\uffcd\054\uffcd\055\uffcd\060\uffcd\061\uffcd\062" +
    "\uffcd\001\002\000\026\004\040\005\044\006\041\007\047" +
    "\010\052\017\045\022\042\036\043\037\046\063\050\001" +
    "\002\000\050\011\uffc8\020\uffc8\021\uffc8\022\uffc8\024\uffc8" +
    "\025\uffc8\026\uffc8\027\uffc8\031\uffc8\033\uffc8\047\uffc8\050" +
    "\uffc8\052\uffc8\053\uffc8\054\uffc8\055\uffc8\060\uffc8\061\uffc8" +
    "\062\uffc8\001\002\000\052\011\uffc7\020\uffc7\021\uffc7\022" +
    "\uffc7\024\uffc7\025\uffc7\026\uffc7\027\uffc7\031\uffc7\033\uffc7" +
    "\046\125\047\uffc7\050\uffc7\052\uffc7\053\uffc7\054\uffc7\055" +
    "\uffc7\060\uffc7\061\uffc7\062\uffc7\001\002\000\026\004\040" +
    "\005\044\006\041\007\047\010\052\017\045\022\042\036" +
    "\043\037\046\063\050\001\002\000\042\011\065\021\062" +
    "\022\056\024\061\025\070\026\057\027\067\031\066\033" +
    "\071\052\060\053\064\054\053\055\063\060\072\061\054" +
    "\062\055\001\002\000\050\011\uffca\020\uffca\021\uffca\022" +
    "\uffca\024\uffca\025\uffca\026\uffca\027\uffca\031\uffca\033\uffca" +
    "\047\uffca\050\uffca\052\uffca\053\uffca\054\uffca\055\uffca\060" +
    "\uffca\061\uffca\062\uffca\001\002\000\026\004\040\005\044" +
    "\006\041\007\047\010\052\017\045\022\042\036\043\037" +
    "\046\063\050\001\002\000\026\004\040\005\044\006\041" +
    "\007\047\010\052\017\045\022\042\036\043\037\046\063" +
    "\050\001\002\000\026\004\040\005\044\006\041\007\047" +
    "\010\052\017\045\022\042\036\043\037\046\063\050\001" +
    "\002\000\026\004\040\005\044\006\041\007\047\010\052" +
    "\017\045\022\042\036\043\037\046\063\050\001\002\000" +
    "\026\004\040\005\044\006\041\007\047\010\052\017\045" +
    "\022\042\036\043\037\046\063\050\001\002\000\026\004" +
    "\040\005\044\006\041\007\047\010\052\017\045\022\042" +
    "\036\043\037\046\063\050\001\002\000\026\004\040\005" +
    "\044\006\041\007\047\010\052\017\045\022\042\036\043" +
    "\037\046\063\050\001\002\000\026\004\040\005\044\006" +
    "\041\007\047\010\052\017\045\022\042\036\043\037\046" +
    "\063\050\001\002\000\026\004\040\005\044\006\041\007" +
    "\047\010\052\017\045\022\042\036\043\037\046\063\050" +
    "\001\002\000\026\004\040\005\044\006\041\007\047\010" +
    "\052\017\045\022\042\036\043\037\046\063\050\001\002" +
    "\000\004\007\101\001\002\000\004\031\077\001\002\000" +
    "\026\004\040\005\044\006\041\007\047\010\052\017\045" +
    "\022\042\036\043\037\046\063\050\001\002\000\026\004" +
    "\040\005\044\006\041\007\047\010\052\017\045\022\042" +
    "\036\043\037\046\063\050\001\002\000\026\004\040\005" +
    "\044\006\041\007\047\010\052\017\045\022\042\036\043" +
    "\037\046\063\050\001\002\000\026\004\040\005\044\006" +
    "\041\007\047\010\052\017\045\022\042\036\043\037\046" +
    "\063\050\001\002\000\050\011\uffce\020\uffce\021\062\022" +
    "\056\024\061\025\070\026\057\027\067\031\uffce\033\071" +
    "\047\uffce\050\uffce\052\060\053\064\054\053\055\063\060" +
    "\uffce\061\054\062\055\001\002\000\050\011\uffd6\020\uffd6" +
    "\021\062\022\056\024\061\025\070\026\057\027\067\031" +
    "\uffd6\033\uffd6\047\uffd6\050\uffd6\052\uffd6\053\uffd6\054\uffd6" +
    "\055\uffd6\060\uffd6\061\uffd6\062\uffd6\001\002\000\050\011" +
    "\uffdc\020\uffdc\021\uffdc\022\uffdc\024\uffdc\025\uffdc\026\057" +
    "\027\uffdc\031\uffdc\033\uffdc\047\uffdc\050\uffdc\052\uffdc\053" +
    "\uffdc\054\uffdc\055\uffdc\060\uffdc\061\uffdc\062\uffdc\001\002" +
    "\000\050\011\uffda\020\uffda\021\uffda\022\uffda\024\uffda\025" +
    "\uffda\026\057\027\uffda\031\uffda\033\uffda\047\uffda\050\uffda" +
    "\052\uffda\053\uffda\054\uffda\055\uffda\060\uffda\061\uffda\062" +
    "\uffda\001\002\000\026\004\040\005\044\006\041\007\047" +
    "\010\052\017\045\022\042\036\043\037\046\063\050\001" +
    "\002\000\050\011\uffd7\020\uffd7\021\062\022\056\024\061" +
    "\025\070\026\057\027\067\031\uffd7\033\uffd7\047\uffd7\050" +
    "\uffd7\052\uffd7\053\uffd7\054\uffd7\055\uffd7\060\uffd7\061\uffd7" +
    "\062\uffd7\001\002\000\004\031\110\001\002\000\004\020" +
    "\103\001\002\000\004\044\104\001\002\000\030\003\025" +
    "\007\017\012\015\034\026\035\033\040\016\042\010\043" +
    "\020\051\031\056\024\057\006\001\002\000\032\003\025" +
    "\007\017\012\015\034\026\035\033\040\016\042\010\043" +
    "\020\045\107\051\031\056\024\057\006\001\002\000\034" +
    "\002\uffff\003\uffff\007\uffff\012\uffff\034\uffff\035\uffff\040" +
    "\uffff\042\uffff\043\uffff\045\uffff\051\uffff\056\uffff\057\uffff" +
    "\001\002\000\034\002\uffe9\003\uffe9\007\uffe9\012\uffe9\034" +
    "\uffe9\035\uffe9\040\uffe9\042\uffe9\043\uffe9\045\uffe9\051\uffe9" +
    "\056\uffe9\057\uffe9\001\002\000\026\004\040\005\044\006" +
    "\041\007\047\010\052\017\045\022\042\036\043\037\046" +
    "\063\050\001\002\000\042\020\uffe8\021\062\022\056\024" +
    "\061\025\070\026\057\027\067\031\066\033\071\052\060" +
    "\053\064\054\053\055\063\060\072\061\054\062\055\001" +
    "\002\000\050\011\uffd2\020\uffd2\021\062\022\056\024\061" +
    "\025\070\026\057\027\067\031\uffd2\033\uffd2\047\uffd2\050" +
    "\uffd2\052\uffd2\053\uffd2\054\uffd2\055\uffd2\060\uffd2\061\uffd2" +
    "\062\uffd2\001\002\000\050\011\uffd4\020\uffd4\021\062\022" +
    "\056\024\061\025\070\026\057\027\067\031\uffd4\033\uffd4" +
    "\047\uffd4\050\uffd4\052\uffd4\053\uffd4\054\uffd4\055\uffd4\060" +
    "\uffd4\061\uffd4\062\uffd4\001\002\000\050\011\uffd9\020\uffd9" +
    "\021\uffd9\022\uffd9\024\061\025\070\026\057\027\067\031" +
    "\uffd9\033\uffd9\047\uffd9\050\uffd9\052\uffd9\053\uffd9\054\uffd9" +
    "\055\uffd9\060\uffd9\061\uffd9\062\uffd9\001\002\000\050\011" +
    "\uffdb\020\uffdb\021\uffdb\022\uffdb\024\uffdb\025\uffdb\026\057" +
    "\027\uffdb\031\uffdb\033\uffdb\047\uffdb\050\uffdb\052\uffdb\053" +
    "\uffdb\054\uffdb\055\uffdb\060\uffdb\061\uffdb\062\uffdb\001\002" +
    "\000\050\011\uffd3\020\uffd3\021\062\022\056\024\061\025" +
    "\070\026\057\027\067\031\uffd3\033\uffd3\047\uffd3\050\uffd3" +
    "\052\uffd3\053\uffd3\054\uffd3\055\uffd3\060\uffd3\061\uffd3\062" +
    "\uffd3\001\002\000\046\011\uffdd\020\uffdd\021\uffdd\022\uffdd" +
    "\024\uffdd\025\uffdd\027\uffdd\031\uffdd\033\uffdd\047\uffdd\050" +
    "\uffdd\052\uffdd\053\uffdd\054\uffdd\055\uffdd\060\uffdd\061\uffdd" +
    "\062\uffdd\001\002\000\050\011\uffd8\020\uffd8\021\uffd8\022" +
    "\uffd8\024\061\025\070\026\057\027\067\031\uffd8\033\uffd8" +
    "\047\uffd8\050\uffd8\052\uffd8\053\uffd8\054\uffd8\055\uffd8\060" +
    "\uffd8\061\uffd8\062\uffd8\001\002\000\050\011\uffd0\020\uffd0" +
    "\021\062\022\056\024\061\025\070\026\057\027\067\031" +
    "\uffd0\033\071\047\uffd0\050\uffd0\052\060\053\064\054\053" +
    "\055\063\060\uffd0\061\uffd0\062\uffd0\001\002\000\050\011" +
    "\uffcf\020\uffcf\021\062\022\056\024\061\025\070\026\057" +
    "\027\067\031\uffcf\033\071\047\uffcf\050\uffcf\052\060\053" +
    "\064\054\053\055\063\060\uffcf\061\uffcf\062\055\001\002" +
    "\000\050\011\uffd5\020\uffd5\021\062\022\056\024\061\025" +
    "\070\026\057\027\067\031\uffd5\033\uffd5\047\uffd5\050\uffd5" +
    "\052\uffd5\053\uffd5\054\uffd5\055\uffd5\060\uffd5\061\uffd5\062" +
    "\uffd5\001\002\000\050\011\uffd1\020\uffd1\021\062\022\056" +
    "\024\061\025\070\026\057\027\067\031\uffd1\033\071\047" +
    "\uffd1\050\uffd1\052\060\053\064\054\053\055\063\060\uffd1" +
    "\061\uffd1\062\uffd1\001\002\000\026\004\040\005\044\006" +
    "\041\007\047\010\052\017\045\022\042\036\043\037\046" +
    "\063\050\001\002\000\042\021\062\022\056\024\061\025" +
    "\070\026\057\027\067\031\066\033\071\047\127\052\060" +
    "\053\064\054\053\055\063\060\072\061\054\062\055\001" +
    "\002\000\050\011\uffc6\020\uffc6\021\uffc6\022\uffc6\024\uffc6" +
    "\025\uffc6\026\uffc6\027\uffc6\031\uffc6\033\uffc6\047\uffc6\050" +
    "\uffc6\052\uffc6\053\uffc6\054\uffc6\055\uffc6\060\uffc6\061\uffc6" +
    "\062\uffc6\001\002\000\042\020\131\021\062\022\056\024" +
    "\061\025\070\026\057\027\067\031\066\033\071\052\060" +
    "\053\064\054\053\055\063\060\072\061\054\062\055\001" +
    "\002\000\050\011\uffc5\020\uffc5\021\uffc5\022\uffc5\024\uffc5" +
    "\025\uffc5\026\uffc5\027\uffc5\031\uffc5\033\uffc5\047\uffc5\050" +
    "\uffc5\052\uffc5\053\uffc5\054\uffc5\055\uffc5\060\uffc5\061\uffc5" +
    "\062\uffc5\001\002\000\050\011\uffde\020\uffde\021\uffde\022" +
    "\uffde\024\uffde\025\uffde\026\uffde\027\uffde\031\uffde\033\uffde" +
    "\047\uffde\050\uffde\052\uffde\053\uffde\054\uffde\055\uffde\060" +
    "\uffde\061\uffde\062\uffde\001\002\000\004\030\134\001\002" +
    "\000\014\013\142\014\135\015\136\016\141\041\140\001" +
    "\002\000\006\031\uffe2\046\uffe2\001\002\000\006\031\uffe1" +
    "\046\uffe1\001\002\000\006\031\144\046\143\001\002\000" +
    "\006\031\uffdf\046\uffdf\001\002\000\006\031\uffe0\046\uffe0" +
    "\001\002\000\006\031\uffe3\046\uffe3\001\002\000\004\047" +
    "\147\001\002\000\026\004\040\005\044\006\041\007\047" +
    "\010\052\017\045\022\042\036\043\037\046\063\050\001" +
    "\002\000\042\011\146\021\062\022\056\024\061\025\070" +
    "\026\057\027\067\031\066\033\071\052\060\053\064\054" +
    "\053\055\063\060\072\061\054\062\055\001\002\000\034" +
    "\002\ufff1\003\ufff1\007\ufff1\012\ufff1\034\ufff1\035\ufff1\040" +
    "\ufff1\042\ufff1\043\ufff1\045\ufff1\051\ufff1\056\ufff1\057\ufff1" +
    "\001\002\000\004\031\150\001\002\000\004\046\151\001" +
    "\002\000\026\004\040\005\044\006\041\007\047\010\052" +
    "\017\045\022\042\036\043\037\046\063\050\001\002\000" +
    "\006\047\154\050\155\001\002\000\044\021\062\022\056" +
    "\024\061\025\070\026\057\027\067\031\066\033\071\047" +
    "\uffee\050\uffee\052\060\053\064\054\053\055\063\060\072" +
    "\061\054\062\055\001\002\000\004\011\157\001\002\000" +
    "\026\004\040\005\044\006\041\007\047\010\052\017\045" +
    "\022\042\036\043\037\046\063\050\001\002\000\044\021" +
    "\062\022\056\024\061\025\070\026\057\027\067\031\066" +
    "\033\071\047\uffef\050\uffef\052\060\053\064\054\053\055" +
    "\063\060\072\061\054\062\055\001\002\000\034\002\ufff0" +
    "\003\ufff0\007\ufff0\012\ufff0\034\ufff0\035\ufff0\040\ufff0\042" +
    "\ufff0\043\ufff0\045\ufff0\051\ufff0\056\ufff0\057\ufff0\001\002" +
    "\000\034\002\ufff3\003\ufff3\007\ufff3\012\ufff3\034\ufff3\035" +
    "\ufff3\040\ufff3\042\ufff3\043\ufff3\045\ufff3\051\ufff3\056\ufff3" +
    "\057\ufff3\001\002\000\034\002\uffe7\003\uffe7\007\uffe7\012" +
    "\uffe7\034\uffe7\035\uffe7\040\uffe7\042\uffe7\043\uffe7\045\uffe7" +
    "\051\uffe7\056\uffe7\057\uffe7\001\002\000\030\003\025\007" +
    "\017\012\015\034\026\035\033\040\016\042\010\043\020" +
    "\051\031\056\024\057\006\001\002\000\032\003\025\007" +
    "\017\012\015\034\026\035\033\040\016\042\010\043\020" +
    "\045\164\051\031\056\024\057\006\001\002\000\004\042" +
    "\165\001\002\000\004\017\166\001\002\000\026\004\040" +
    "\005\044\006\041\007\047\010\052\017\045\022\042\036" +
    "\043\037\046\063\050\001\002\000\042\020\170\021\062" +
    "\022\056\024\061\025\070\026\057\027\067\031\066\033" +
    "\071\052\060\053\064\054\053\055\063\060\072\061\054" +
    "\062\055\001\002\000\004\011\171\001\002\000\034\002" +
    "\uffe4\003\uffe4\007\uffe4\012\uffe4\034\uffe4\035\uffe4\040\uffe4" +
    "\042\uffe4\043\uffe4\045\uffe4\051\uffe4\056\uffe4\057\uffe4\001" +
    "\002\000\026\004\040\005\044\006\041\007\047\010\052" +
    "\017\045\022\042\036\043\037\046\063\050\001\002\000" +
    "\042\011\174\021\062\022\056\024\061\025\070\026\057" +
    "\027\067\031\066\033\071\052\060\053\064\054\053\055" +
    "\063\060\072\061\054\062\055\001\002\000\056\002\uffeb" +
    "\003\uffeb\004\uffeb\005\uffeb\006\uffeb\007\uffeb\010\uffeb\012" +
    "\uffeb\017\uffeb\022\uffeb\034\uffeb\035\uffeb\036\uffeb\037\uffeb" +
    "\040\uffeb\042\uffeb\043\uffeb\045\uffeb\051\uffeb\056\uffeb\057" +
    "\uffeb\063\uffeb\001\002\000\026\004\040\005\044\006\041" +
    "\007\047\010\052\017\045\022\042\036\043\037\046\063" +
    "\050\001\002\000\042\020\177\021\062\022\056\024\061" +
    "\025\070\026\057\027\067\031\066\033\071\052\060\053" +
    "\064\054\053\055\063\060\072\061\054\062\055\001\002" +
    "\000\004\044\200\001\002\000\030\003\025\007\017\012" +
    "\015\034\026\035\033\040\016\042\010\043\020\051\031" +
    "\056\024\057\006\001\002\000\032\003\025\007\017\012" +
    "\015\034\026\035\033\040\016\042\010\043\020\045\202" +
    "\051\031\056\024\057\006\001\002\000\034\002\uffea\003" +
    "\uffea\007\uffea\012\uffea\034\uffea\035\uffea\040\uffea\042\uffea" +
    "\043\uffea\045\uffea\051\uffea\056\uffea\057\uffea\001\002\000" +
    "\026\004\040\005\044\006\041\007\047\010\052\017\045" +
    "\022\042\036\043\037\046\063\050\001\002\000\042\020" +
    "\205\021\062\022\056\024\061\025\070\026\057\027\067" +
    "\031\066\033\071\052\060\053\064\054\053\055\063\060" +
    "\072\061\054\062\055\001\002\000\004\011\206\001\002" +
    "\000\034\002\ufff2\003\ufff2\007\ufff2\012\ufff2\034\ufff2\035" +
    "\ufff2\040\ufff2\042\ufff2\043\ufff2\045\ufff2\051\ufff2\056\ufff2" +
    "\057\ufff2\001\002\000\026\004\040\005\044\006\041\007" +
    "\047\010\052\017\045\022\042\036\043\037\046\063\050" +
    "\001\002\000\042\020\211\021\062\022\056\024\061\025" +
    "\070\026\057\027\067\031\066\033\071\052\060\053\064" +
    "\054\053\055\063\060\072\061\054\062\055\001\002\000" +
    "\004\044\212\001\002\000\030\003\025\007\017\012\015" +
    "\034\026\035\033\040\016\042\010\043\020\051\031\056" +
    "\024\057\006\001\002\000\032\003\025\007\017\012\015" +
    "\034\026\035\033\040\016\042\010\043\020\045\214\051" +
    "\031\056\024\057\006\001\002\000\034\002\uffe5\003\uffe5" +
    "\007\uffe5\012\uffe5\034\uffe5\035\uffe5\040\uffe5\042\uffe5\043" +
    "\uffe5\045\uffe5\051\uffe5\056\uffe5\057\uffe5\001\002\000\034" +
    "\002\uffe6\003\uffe6\007\uffe6\012\uffe6\034\uffe6\035\uffe6\040" +
    "\uffe6\042\uffe6\043\uffe6\045\uffe6\051\uffe6\056\uffe6\057\uffe6" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\213\000\036\002\033\003\012\004\004\005\031\006" +
    "\011\007\021\010\022\011\013\012\010\013\003\014\027" +
    "\016\006\017\020\022\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\004" +
    "\105\005\031\006\011\007\021\010\022\011\013\012\010" +
    "\013\003\014\027\016\006\017\020\022\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\036\001\001\000" +
    "\004\021\050\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\131\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\127\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\123\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\122\001\001\000\004\021\121" +
    "\001\001\000\004\021\120\001\001\000\004\021\117\001" +
    "\001\000\004\021\116\001\001\000\004\021\115\001\001" +
    "\000\004\021\114\001\001\000\004\021\113\001\001\000" +
    "\004\021\112\001\001\000\004\021\111\001\001\000\004" +
    "\015\101\001\001\000\002\001\001\000\004\021\075\001" +
    "\001\000\004\021\074\001\001\000\004\021\073\001\001" +
    "\000\004\021\072\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\077" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\003\104\004\004\005\031" +
    "\006\011\007\021\010\022\011\013\012\010\013\003\014" +
    "\027\016\006\017\020\022\026\001\001\000\032\004\105" +
    "\005\031\006\011\007\021\010\022\011\013\012\010\013" +
    "\003\014\027\016\006\017\020\022\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\110\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\125\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\136\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\144\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\021\152\023\151\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\155\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\003\162\004\004\005" +
    "\031\006\011\007\021\010\022\011\013\012\010\013\003" +
    "\014\027\016\006\017\020\022\026\001\001\000\032\004" +
    "\105\005\031\006\011\007\021\010\022\011\013\012\010" +
    "\013\003\014\027\016\006\017\020\022\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\166\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\021\172\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\175\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\003\200\004\004\005\031\006\011\007\021" +
    "\010\022\011\013\012\010\013\003\014\027\016\006\017" +
    "\020\022\026\001\001\000\032\004\105\005\031\006\011" +
    "\007\021\010\022\011\013\012\010\013\003\014\027\016" +
    "\006\017\020\022\026\001\001\000\002\001\001\000\004" +
    "\021\203\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\207\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\003\212\004\004\005\031\006" +
    "\011\007\021\010\022\011\013\012\010\013\003\014\027" +
    "\016\006\017\020\022\026\001\001\000\032\004\105\005" +
    "\031\006\011\007\021\010\022\011\013\012\010\013\003" +
    "\014\027\016\006\017\020\022\026\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    scanner s;
    parser(scanner s){this.s = s;}

    public LinkedList<Errores> listaErrores = new LinkedList<>();
    
    public void syntax_error(Symbol s){
        listaErrores.add(new Errores("SINTACTICO RECUPERABLE", "No se esperaba el componente " + s.value, s.left, s.right));
    }

    public void unrecovered_syntax_error (Symbol s){
        listaErrores.add(new Errores("SINTACTICO NO RECUPERABLE", "No se esperaba el componente " + s.value, s.left, s.right));
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> start_val = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INSTRUCCIONES 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a; RESULT.add(b);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new LinkedList<>(); RESULT.add(a);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= IMPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= DECLARACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= ASIGNACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= DECLARACION_VEC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= SIF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= CFOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= BREAKK 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= CONTINUEE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= SDO_WHILE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= SWHILE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCION ::= error FINCADENA 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // IMPRESION ::= IMPRIMIR PAR1 EXPRESION PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  RESULT = new Print(a, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLARACION ::= MUTABILIDAD ID DOSPUNTOS TIPOS IGUAL EXPRESION FINCADENA 
            {
              Instruccion RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new Declaracion(m, b, c, a, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACION_VEC ::= MUTABILIDAD ID DOSPUNTOS TIPOS CORCHETE1 CORCHETE2 IGUAL CORCHETE1 LISTA_VALORES CORCHETE2 FINCADENA 
            {
              Instruccion RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int valoresleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valoresright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> valores = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new DeclaracionVec(m, b, valores, 1, a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VEC",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LISTA_VALORES ::= LISTA_VALORES COMA EXPRESION 
            {
              LinkedList<Instruccion> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> lista = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion exp = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 lista.add(exp); RESULT = lista; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_VALORES",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LISTA_VALORES ::= EXPRESION 
            {
              LinkedList<Instruccion> RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion exp = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(exp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_VALORES",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // MUTABILIDAD ::= CONST 
            {
              String RESULT =null;
		  RESULT = "CONST";  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MUTABILIDAD",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // MUTABILIDAD ::= VAR 
            {
              String RESULT =null;
		  RESULT = "VAR";  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MUTABILIDAD",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ASIGNACION ::= ID IGUAL EXPRESION FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT=new AsignacionVar(a, b, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SIF ::= IF PAR1 EXPRESION PAR2 LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new If(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CFOR ::= FOR PAR1 ASIGNACION EXPRESION FINCADENA ACTUALIZA_FOR PAR2 LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new For(a, b, c, d, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CFOR",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ACTUALIZA_FOR ::= ID IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=new AsignacionVar(a, b, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZA_FOR",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // BREAKK ::= BREAK FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		    RESULT = new Break(aleft, aright);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BREAKK",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CONTINUEE ::= CONTINUE FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		    RESULT = new Continue(aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTINUEE",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SWHILE ::= WHILE PAR1 EXPRESION PAR2 LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new While(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SWHILE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SDO_WHILE ::= DO LLAVE1 INSTRUCCIONES LLAVE2 WHILE PAR1 EXPRESION PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new DoWhile(b, a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SDO_WHILE",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // TIPOS ::= INT 
            {
              Tipo RESULT =null;
		  RESULT = new Tipo(tipoDato.ENTERO);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // TIPOS ::= DOUBLE 
            {
              Tipo RESULT =null;
		  RESULT = new Tipo(tipoDato.DECIMAL);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TIPOS ::= STRING 
            {
              Tipo RESULT =null;
		  RESULT = new Tipo(tipoDato.CADENA);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TIPOS ::= CHAR 
            {
              Tipo RESULT =null;
		  RESULT = new Tipo(tipoDato.CARACTER);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TIPOS ::= BOOL 
            {
              Tipo RESULT =null;
		  RESULT = new Tipo(tipoDato.BOOLEANO);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXPRESION ::= MENOS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Aritmeticas(a, OperadoresAritmeticos.NEGACION, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXPRESION ::= EXPRESION POTENCIA EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.POTENCIA, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXPRESION ::= EXPRESION DIVISION EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.DIVISION, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXPRESION ::= EXPRESION MULTIPLICACION EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.MULTIPLICACION, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXPRESION ::= EXPRESION MODULO EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.MODULO, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXPRESION ::= EXPRESION MAS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.SUMA, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXPRESION ::= EXPRESION MENOS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.RESTA, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXPRESION ::= EXPRESION IGUAL IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Relacionales(a, b, OperadoresRelacionales.EQUALS, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPRESION ::= EXPRESION DIFERENTE EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Relacionales(a, b, OperadoresRelacionales.DIFERENTE, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXPRESION ::= EXPRESION MENORIGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Relacionales(a, b, OperadoresRelacionales.MENORIGUAL, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXPRESION ::= EXPRESION MAYORIGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Relacionales(a, b, OperadoresRelacionales.MAYORIGUAL, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXPRESION ::= EXPRESION MENOR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Relacionales(a, b, OperadoresRelacionales.MENOR, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXPRESION ::= EXPRESION MAYOR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Relacionales(a, b, OperadoresRelacionales.MAYOR, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXPRESION ::= NOT EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Logicos(a, OperadoresLogicos.NOT, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXPRESION ::= EXPRESION XOR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Logicos(a, b, OperadoresLogicos.XOR, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXPRESION ::= EXPRESION AND EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Logicos(a, b, OperadoresLogicos.AND, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXPRESION ::= EXPRESION OR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Logicos(a, b, OperadoresLogicos.OR, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPRESION ::= ENTERO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Nativo(Integer.parseInt(a), new Tipo(tipoDato.ENTERO), aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXPRESION ::= DECIMAL 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Nativo(new Double(a), new Tipo(tipoDato.DECIMAL), aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXPRESION ::= CADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Nativo(a, new Tipo(tipoDato.CADENA), aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXPRESION ::= CARACTER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Nativo(a, new Tipo(tipoDato.CARACTER), aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXPRESION ::= TRUE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(true, new Tipo(tipoDato.BOOLEANO), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXPRESION ::= FALSE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(false, new Tipo(tipoDato.BOOLEANO), aleft, aright );    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXPRESION ::= ID 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new AccesoVar(a, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXPRESION ::= ID CORCHETE1 EXPRESION CORCHETE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new AccesoVec(a, b, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXPRESION ::= PAR1 EXPRESION PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = a;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
