
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analisis;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import abstracto.Instruccion;
import simbolo.Tipo;
import simbolo.tipoDato;
import excepciones.Errores;
import java.util.HashMap;
import instrucciones.Print;
import instrucciones.Declaracion;
import instrucciones.AsignacionVar;
import instrucciones.If;
import instrucciones.For;
import instrucciones.Break;
import instrucciones.Continue;
import instrucciones.While;
import instrucciones.DoWhile;
import instrucciones.DeclaracionVec;
import instrucciones.AsignacionVec;
import instrucciones.DeclaracionList;
import instrucciones.Append;
import instrucciones.Remove;
import instrucciones.Metodo;
import instrucciones.StartWith;
import instrucciones.Llamada;
import instrucciones.Return;
import expresiones.Nativo;
import expresiones.Aritmeticas;
import expresiones.OperadoresAritmeticos;
import expresiones.Relacionales;
import expresiones.OperadoresRelacionales;
import expresiones.AccesoVar;
import expresiones.Logicos;
import expresiones.OperadoresLogicos;
import expresiones.AccesoVec;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\127\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\004\000\002\004\003\000\002\004\003\000" +
    "\002\004\004\000\002\005\007\000\002\006\011\000\002" +
    "\010\015\000\002\012\015\000\002\030\005\000\002\030" +
    "\003\000\002\027\003\000\002\027\003\000\002\007\006" +
    "\000\002\011\011\000\002\031\012\000\002\031\011\000" +
    "\002\032\006\000\002\032\004\000\002\033\010\000\002" +
    "\033\007\000\002\035\006\000\002\035\005\000\002\034" +
    "\005\000\002\034\003\000\002\013\011\000\002\016\014" +
    "\000\002\017\005\000\002\020\004\000\002\021\004\000" +
    "\002\022\005\000\002\022\004\000\002\014\011\000\002" +
    "\015\013\000\002\023\011\000\002\024\011\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\026\004\000" +
    "\002\026\005\000\002\026\005\000\002\026\005\000\002" +
    "\026\005\000\002\026\005\000\002\026\005\000\002\026" +
    "\006\000\002\026\005\000\002\026\005\000\002\026\005" +
    "\000\002\026\005\000\002\026\005\000\002\026\004\000" +
    "\002\026\005\000\002\026\005\000\002\026\005\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\006\000\002\026\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\327\000\052\003\031\007\024\012\007\013\014\014" +
    "\011\015\050\016\006\034\005\035\055\040\023\041\021" +
    "\042\042\043\056\044\043\053\017\060\033\061\013\062" +
    "\026\072\035\073\030\001\002\000\004\007\312\001\002" +
    "\000\004\007\uffe4\001\002\000\012\007\uffc8\031\uffc8\050" +
    "\uffc8\055\uffc8\001\002\000\004\017\306\001\002\000\056" +
    "\002\ufff5\003\ufff5\007\ufff5\012\ufff5\013\ufff5\014\ufff5\015" +
    "\ufff5\016\ufff5\034\ufff5\035\ufff5\040\ufff5\041\ufff5\042\ufff5" +
    "\043\ufff5\044\ufff5\047\ufff5\053\ufff5\060\ufff5\061\ufff5\062" +
    "\ufff5\072\ufff5\073\ufff5\001\002\000\012\007\uffca\031\uffca" +
    "\050\uffca\055\uffca\001\002\000\056\002\ufff0\003\ufff0\007" +
    "\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0\016\ufff0\034\ufff0" +
    "\035\ufff0\040\ufff0\041\ufff0\042\ufff0\043\ufff0\044\ufff0\047" +
    "\ufff0\053\ufff0\060\ufff0\061\ufff0\062\ufff0\072\ufff0\073\ufff0" +
    "\001\002\000\004\011\305\001\002\000\012\007\uffcb\031" +
    "\uffcb\050\uffcb\055\uffcb\001\002\000\056\002\ufffe\003\ufffe" +
    "\007\ufffe\012\ufffe\013\ufffe\014\ufffe\015\ufffe\016\ufffe\034" +
    "\ufffe\035\ufffe\040\ufffe\041\ufffe\042\ufffe\043\ufffe\044\ufffe" +
    "\047\ufffe\053\ufffe\060\ufffe\061\ufffe\062\ufffe\072\ufffe\073" +
    "\ufffe\001\002\000\056\002\ufff4\003\ufff4\007\ufff4\012\ufff4" +
    "\013\ufff4\014\ufff4\015\ufff4\016\ufff4\034\ufff4\035\ufff4\040" +
    "\ufff4\041\ufff4\042\ufff4\043\ufff4\044\ufff4\047\ufff4\053\ufff4" +
    "\060\ufff4\061\ufff4\062\ufff4\072\ufff4\073\ufff4\001\002\000" +
    "\004\017\270\001\002\000\054\002\000\003\031\007\024" +
    "\012\007\013\014\014\011\015\050\016\006\034\005\035" +
    "\055\040\023\041\021\042\042\043\056\044\043\053\017" +
    "\060\033\061\013\062\026\072\035\073\030\001\002\000" +
    "\012\007\uffc7\031\uffc7\050\uffc7\055\uffc7\001\002\000\004" +
    "\007\250\001\002\000\004\017\242\001\002\000\012\017" +
    "\144\031\220\050\217\070\216\001\002\000\056\002\ufff9" +
    "\003\ufff9\007\ufff9\012\ufff9\013\ufff9\014\ufff9\015\ufff9\016" +
    "\ufff9\034\ufff9\035\ufff9\040\ufff9\041\ufff9\042\ufff9\043\ufff9" +
    "\044\ufff9\047\ufff9\053\ufff9\060\ufff9\061\ufff9\062\ufff9\072" +
    "\ufff9\073\ufff9\001\002\000\030\004\065\005\070\006\066" +
    "\007\075\010\100\011\213\017\073\022\067\036\071\037" +
    "\074\066\076\001\002\000\056\002\ufff8\003\ufff8\007\ufff8" +
    "\012\ufff8\013\ufff8\014\ufff8\015\ufff8\016\ufff8\034\ufff8\035" +
    "\ufff8\040\ufff8\041\ufff8\042\ufff8\043\ufff8\044\ufff8\047\ufff8" +
    "\053\ufff8\060\ufff8\061\ufff8\062\ufff8\072\ufff8\073\ufff8\001" +
    "\002\000\004\007\204\001\002\000\004\011\203\001\002" +
    "\000\056\002\ufffa\003\ufffa\007\ufffa\012\ufffa\013\ufffa\014" +
    "\ufffa\015\ufffa\016\ufffa\034\ufffa\035\ufffa\040\ufffa\041\ufffa" +
    "\042\ufffa\043\ufffa\044\ufffa\047\ufffa\053\ufffa\060\ufffa\061" +
    "\ufffa\062\ufffa\072\ufffa\073\ufffa\001\002\000\004\011\202" +
    "\001\002\000\056\002\ufff1\003\ufff1\007\ufff1\012\ufff1\013" +
    "\ufff1\014\ufff1\015\ufff1\016\ufff1\034\ufff1\035\ufff1\040\ufff1" +
    "\041\ufff1\042\ufff1\043\ufff1\044\ufff1\047\ufff1\053\ufff1\060" +
    "\ufff1\061\ufff1\062\ufff1\072\ufff1\073\ufff1\001\002\000\012" +
    "\007\uffc6\031\uffc6\050\uffc6\055\uffc6\001\002\000\056\002" +
    "\ufffb\003\ufffb\007\ufffb\012\ufffb\013\ufffb\014\ufffb\015\ufffb" +
    "\016\ufffb\034\ufffb\035\ufffb\040\ufffb\041\ufffb\042\ufffb\043" +
    "\ufffb\044\ufffb\047\ufffb\053\ufffb\060\ufffb\061\ufffb\062\ufffb" +
    "\072\ufffb\073\ufffb\001\002\000\056\002\ufffc\003\ufffc\007" +
    "\ufffc\012\ufffc\013\ufffc\014\ufffc\015\ufffc\016\ufffc\034\ufffc" +
    "\035\ufffc\040\ufffc\041\ufffc\042\ufffc\043\ufffc\044\ufffc\047" +
    "\ufffc\053\ufffc\060\ufffc\061\ufffc\062\ufffc\072\ufffc\073\ufffc" +
    "\001\002\000\056\002\ufff2\003\ufff2\007\ufff2\012\ufff2\013" +
    "\ufff2\014\ufff2\015\ufff2\016\ufff2\034\ufff2\035\ufff2\040\ufff2" +
    "\041\ufff2\042\ufff2\043\ufff2\044\ufff2\047\ufff2\053\ufff2\060" +
    "\ufff2\061\ufff2\062\ufff2\072\ufff2\073\ufff2\001\002\000\056" +
    "\002\ufff6\003\ufff6\007\ufff6\012\ufff6\013\ufff6\014\ufff6\015" +
    "\ufff6\016\ufff6\034\ufff6\035\ufff6\040\ufff6\041\ufff6\042\ufff6" +
    "\043\ufff6\044\ufff6\047\ufff6\053\ufff6\060\ufff6\061\ufff6\062" +
    "\ufff6\072\ufff6\073\ufff6\001\002\000\004\017\174\001\002" +
    "\000\004\054\162\001\002\000\056\002\ufffd\003\ufffd\007" +
    "\ufffd\012\ufffd\013\ufffd\014\ufffd\015\ufffd\016\ufffd\034\ufffd" +
    "\035\ufffd\040\ufffd\041\ufffd\042\ufffd\043\ufffd\044\ufffd\047" +
    "\ufffd\053\ufffd\060\ufffd\061\ufffd\062\ufffd\072\ufffd\073\ufffd" +
    "\001\002\000\056\002\ufff7\003\ufff7\007\ufff7\012\ufff7\013" +
    "\ufff7\014\ufff7\015\ufff7\016\ufff7\034\ufff7\035\ufff7\040\ufff7" +
    "\041\ufff7\042\ufff7\043\ufff7\044\ufff7\047\ufff7\053\ufff7\060" +
    "\ufff7\061\ufff7\062\ufff7\072\ufff7\073\ufff7\001\002\000\004" +
    "\011\161\001\002\000\056\002\uffef\003\uffef\007\uffef\012" +
    "\uffef\013\uffef\014\uffef\015\uffef\016\uffef\034\uffef\035\uffef" +
    "\040\uffef\041\uffef\042\uffef\043\uffef\044\uffef\047\uffef\053" +
    "\uffef\060\uffef\061\uffef\062\uffef\072\uffef\073\uffef\001\002" +
    "\000\012\007\uffc9\031\uffc9\050\uffc9\055\uffc9\001\002\000" +
    "\004\002\160\001\002\000\056\002\uffed\003\uffed\007\uffed" +
    "\012\uffed\013\uffed\014\uffed\015\uffed\016\uffed\034\uffed\035" +
    "\uffed\040\uffed\041\uffed\042\uffed\043\uffed\044\uffed\047\uffed" +
    "\053\uffed\060\uffed\061\uffed\062\uffed\072\uffed\073\uffed\001" +
    "\002\000\056\002\ufff3\003\ufff3\007\ufff3\012\ufff3\013\ufff3" +
    "\014\ufff3\015\ufff3\016\ufff3\034\ufff3\035\ufff3\040\ufff3\041" +
    "\ufff3\042\ufff3\043\ufff3\044\ufff3\047\ufff3\053\ufff3\060\ufff3" +
    "\061\ufff3\062\ufff3\072\ufff3\073\ufff3\001\002\000\056\002" +
    "\uffec\003\uffec\007\uffec\012\uffec\013\uffec\014\uffec\015\uffec" +
    "\016\uffec\034\uffec\035\uffec\040\uffec\041\uffec\042\uffec\043" +
    "\uffec\044\uffec\047\uffec\053\uffec\060\uffec\061\uffec\062\uffec" +
    "\072\uffec\073\uffec\001\002\000\004\007\uffe3\001\002\000" +
    "\004\046\057\001\002\000\052\003\031\007\024\012\007" +
    "\013\014\014\011\015\050\016\006\034\005\035\055\040" +
    "\023\041\021\042\042\043\056\044\043\053\017\060\033" +
    "\061\013\062\026\072\035\073\030\001\002\000\054\003" +
    "\031\007\024\012\007\013\014\014\011\015\050\016\006" +
    "\034\005\035\055\040\023\041\021\042\042\043\056\044" +
    "\043\047\061\053\017\060\033\061\013\062\026\072\035" +
    "\073\030\001\002\000\004\042\063\001\002\000\056\002" +
    "\uffff\003\uffff\007\uffff\012\uffff\013\uffff\014\uffff\015\uffff" +
    "\016\uffff\034\uffff\035\uffff\040\uffff\041\uffff\042\uffff\043" +
    "\uffff\044\uffff\047\uffff\053\uffff\060\uffff\061\uffff\062\uffff" +
    "\072\uffff\073\uffff\001\002\000\004\017\064\001\002\000" +
    "\026\004\065\005\070\006\066\007\075\010\100\017\073" +
    "\022\067\036\071\037\074\066\076\001\002\000\050\011" +
    "\uffb1\020\uffb1\021\uffb1\022\uffb1\024\uffb1\025\uffb1\026\uffb1" +
    "\027\uffb1\031\uffb1\033\uffb1\051\uffb1\052\uffb1\054\uffb1\055" +
    "\uffb1\056\uffb1\057\uffb1\063\uffb1\064\uffb1\065\uffb1\001\002" +
    "\000\050\011\uffb2\020\uffb2\021\uffb2\022\uffb2\024\uffb2\025" +
    "\uffb2\026\uffb2\027\uffb2\031\uffb2\033\uffb2\051\uffb2\052\uffb2" +
    "\054\uffb2\055\uffb2\056\uffb2\057\uffb2\063\uffb2\064\uffb2\065" +
    "\uffb2\001\002\000\026\004\065\005\070\006\066\007\075" +
    "\010\100\017\073\022\067\036\071\037\074\066\076\001" +
    "\002\000\050\011\uffb3\020\uffb3\021\uffb3\022\uffb3\024\uffb3" +
    "\025\uffb3\026\uffb3\027\uffb3\031\uffb3\033\uffb3\051\uffb3\052" +
    "\uffb3\054\uffb3\055\uffb3\056\uffb3\057\uffb3\063\uffb3\064\uffb3" +
    "\065\uffb3\001\002\000\050\011\uffaf\020\uffaf\021\uffaf\022" +
    "\uffaf\024\uffaf\025\uffaf\026\uffaf\027\uffaf\031\uffaf\033\uffaf" +
    "\051\uffaf\052\uffaf\054\uffaf\055\uffaf\056\uffaf\057\uffaf\063" +
    "\uffaf\064\uffaf\065\uffaf\001\002\000\050\011\uffb4\020\uffb4" +
    "\021\uffb4\022\uffb4\024\uffb4\025\uffb4\026\uffb4\027\uffb4\031" +
    "\uffb4\033\uffb4\051\uffb4\052\uffb4\054\uffb4\055\uffb4\056\uffb4" +
    "\057\uffb4\063\uffb4\064\uffb4\065\uffb4\001\002\000\026\004" +
    "\065\005\070\006\066\007\075\010\100\017\073\022\067" +
    "\036\071\037\074\066\076\001\002\000\050\011\uffae\020" +
    "\uffae\021\uffae\022\uffae\024\uffae\025\uffae\026\uffae\027\uffae" +
    "\031\uffae\033\uffae\051\uffae\052\uffae\054\uffae\055\uffae\056" +
    "\uffae\057\uffae\063\uffae\064\uffae\065\uffae\001\002\000\054" +
    "\011\uffad\017\144\020\uffad\021\uffad\022\uffad\024\uffad\025" +
    "\uffad\026\uffad\027\uffad\031\uffad\033\uffad\050\143\051\uffad" +
    "\052\uffad\054\uffad\055\uffad\056\uffad\057\uffad\063\uffad\064" +
    "\uffad\065\uffad\001\002\000\026\004\065\005\070\006\066" +
    "\007\075\010\100\017\073\022\067\036\071\037\074\066" +
    "\076\001\002\000\042\020\112\021\110\022\104\024\107" +
    "\025\116\026\105\027\114\031\115\033\117\054\106\055" +
    "\113\056\101\057\111\063\120\064\102\065\103\001\002" +
    "\000\050\011\uffb0\020\uffb0\021\uffb0\022\uffb0\024\uffb0\025" +
    "\uffb0\026\uffb0\027\uffb0\031\uffb0\033\uffb0\051\uffb0\052\uffb0" +
    "\054\uffb0\055\uffb0\056\uffb0\057\uffb0\063\uffb0\064\uffb0\065" +
    "\uffb0\001\002\000\026\004\065\005\070\006\066\007\075" +
    "\010\100\017\073\022\067\036\071\037\074\066\076\001" +
    "\002\000\026\004\065\005\070\006\066\007\075\010\100" +
    "\017\073\022\067\036\071\037\074\066\076\001\002\000" +
    "\026\004\065\005\070\006\066\007\075\010\100\017\073" +
    "\022\067\036\071\037\074\066\076\001\002\000\026\004" +
    "\065\005\070\006\066\007\075\010\100\017\073\022\067" +
    "\036\071\037\074\066\076\001\002\000\026\004\065\005" +
    "\070\006\066\007\075\010\100\017\073\022\067\036\071" +
    "\037\074\066\076\001\002\000\026\004\065\005\070\006" +
    "\066\007\075\010\100\017\073\022\067\036\071\037\074" +
    "\066\076\001\002\000\026\004\065\005\070\006\066\007" +
    "\075\010\100\017\073\022\067\036\071\037\074\066\076" +
    "\001\002\000\026\004\065\005\070\006\066\007\075\010" +
    "\100\017\073\022\067\036\071\037\074\066\076\001\002" +
    "\000\026\004\065\005\070\006\066\007\075\010\100\017" +
    "\073\022\067\036\071\037\074\066\076\001\002\000\004" +
    "\011\130\001\002\000\026\004\065\005\070\006\066\007" +
    "\075\010\100\017\073\022\067\036\071\037\074\066\076" +
    "\001\002\000\026\004\065\005\070\006\066\007\075\010" +
    "\100\017\073\022\067\036\071\037\074\066\076\001\002" +
    "\000\004\031\124\001\002\000\026\004\065\005\070\006" +
    "\066\007\075\010\100\017\073\022\067\036\071\037\074" +
    "\066\076\001\002\000\026\004\065\005\070\006\066\007" +
    "\075\010\100\017\073\022\067\036\071\037\074\066\076" +
    "\001\002\000\026\004\065\005\070\006\066\007\075\010" +
    "\100\017\073\022\067\036\071\037\074\066\076\001\002" +
    "\000\050\011\uffb5\020\uffb5\021\110\022\104\024\107\025" +
    "\116\026\105\027\114\031\uffb5\033\117\051\uffb5\052\uffb5" +
    "\054\106\055\113\056\101\057\111\063\uffb5\064\102\065" +
    "\103\001\002\000\050\011\uffbd\020\uffbd\021\110\022\104" +
    "\024\107\025\116\026\105\027\114\031\uffbd\033\uffbd\051" +
    "\uffbd\052\uffbd\054\uffbd\055\uffbd\056\uffbd\057\uffbd\063\uffbd" +
    "\064\uffbd\065\uffbd\001\002\000\050\011\uffc3\020\uffc3\021" +
    "\uffc3\022\uffc3\024\uffc3\025\uffc3\026\105\027\uffc3\031\uffc3" +
    "\033\uffc3\051\uffc3\052\uffc3\054\uffc3\055\uffc3\056\uffc3\057" +
    "\uffc3\063\uffc3\064\uffc3\065\uffc3\001\002\000\026\004\065" +
    "\005\070\006\066\007\075\010\100\017\073\022\067\036" +
    "\071\037\074\066\076\001\002\000\050\011\uffbe\020\uffbe" +
    "\021\110\022\104\024\107\025\116\026\105\027\114\031" +
    "\uffbe\033\uffbe\051\uffbe\052\uffbe\054\uffbe\055\uffbe\056\uffbe" +
    "\057\uffbe\063\uffbe\064\uffbe\065\uffbe\001\002\000\050\011" +
    "\uffc1\020\uffc1\021\uffc1\022\uffc1\024\uffc1\025\uffc1\026\105" +
    "\027\uffc1\031\uffc1\033\uffc1\051\uffc1\052\uffc1\054\uffc1\055" +
    "\uffc1\056\uffc1\057\uffc1\063\uffc1\064\uffc1\065\uffc1\001\002" +
    "\000\050\011\uffb9\020\uffb9\021\110\022\104\024\107\025" +
    "\116\026\105\027\114\031\uffb9\033\uffb9\051\uffb9\052\uffb9" +
    "\054\uffb9\055\uffb9\056\uffb9\057\uffb9\063\uffb9\064\uffb9\065" +
    "\uffb9\001\002\000\056\002\uffce\003\uffce\007\uffce\012\uffce" +
    "\013\uffce\014\uffce\015\uffce\016\uffce\034\uffce\035\uffce\040" +
    "\uffce\041\uffce\042\uffce\043\uffce\044\uffce\047\uffce\053\uffce" +
    "\060\uffce\061\uffce\062\uffce\072\uffce\073\uffce\001\002\000" +
    "\050\011\uffbb\020\uffbb\021\110\022\104\024\107\025\116" +
    "\026\105\027\114\031\uffbb\033\uffbb\051\uffbb\052\uffbb\054" +
    "\uffbb\055\uffbb\056\uffbb\057\uffbb\063\uffbb\064\uffbb\065\uffbb" +
    "\001\002\000\050\011\uffc0\020\uffc0\021\uffc0\022\uffc0\024" +
    "\107\025\116\026\105\027\114\031\uffc0\033\uffc0\051\uffc0" +
    "\052\uffc0\054\uffc0\055\uffc0\056\uffc0\057\uffc0\063\uffc0\064" +
    "\uffc0\065\uffc0\001\002\000\050\011\uffc2\020\uffc2\021\uffc2" +
    "\022\uffc2\024\uffc2\025\uffc2\026\105\027\uffc2\031\uffc2\033" +
    "\uffc2\051\uffc2\052\uffc2\054\uffc2\055\uffc2\056\uffc2\057\uffc2" +
    "\063\uffc2\064\uffc2\065\uffc2\001\002\000\050\011\uffba\020" +
    "\uffba\021\110\022\104\024\107\025\116\026\105\027\114" +
    "\031\uffba\033\uffba\051\uffba\052\uffba\054\uffba\055\uffba\056" +
    "\uffba\057\uffba\063\uffba\064\uffba\065\uffba\001\002\000\046" +
    "\011\uffc4\020\uffc4\021\uffc4\022\uffc4\024\uffc4\025\uffc4\027" +
    "\uffc4\031\uffc4\033\uffc4\051\uffc4\052\uffc4\054\uffc4\055\uffc4" +
    "\056\uffc4\057\uffc4\063\uffc4\064\uffc4\065\uffc4\001\002\000" +
    "\050\011\uffbf\020\uffbf\021\uffbf\022\uffbf\024\107\025\116" +
    "\026\105\027\114\031\uffbf\033\uffbf\051\uffbf\052\uffbf\054" +
    "\uffbf\055\uffbf\056\uffbf\057\uffbf\063\uffbf\064\uffbf\065\uffbf" +
    "\001\002\000\050\011\uffb7\020\uffb7\021\110\022\104\024" +
    "\107\025\116\026\105\027\114\031\uffb7\033\117\051\uffb7" +
    "\052\uffb7\054\106\055\113\056\101\057\111\063\uffb7\064" +
    "\uffb7\065\uffb7\001\002\000\050\011\uffb6\020\uffb6\021\110" +
    "\022\104\024\107\025\116\026\105\027\114\031\uffb6\033" +
    "\117\051\uffb6\052\uffb6\054\106\055\113\056\101\057\111" +
    "\063\uffb6\064\uffb6\065\103\001\002\000\050\011\uffbc\020" +
    "\uffbc\021\110\022\104\024\107\025\116\026\105\027\114" +
    "\031\uffbc\033\uffbc\051\uffbc\052\uffbc\054\uffbc\055\uffbc\056" +
    "\uffbc\057\uffbc\063\uffbc\064\uffbc\065\uffbc\001\002\000\050" +
    "\011\uffb8\020\uffb8\021\110\022\104\024\107\025\116\026" +
    "\105\027\114\031\uffb8\033\117\051\uffb8\052\uffb8\054\106" +
    "\055\113\056\101\057\111\063\uffb8\064\uffb8\065\uffb8\001" +
    "\002\000\026\004\065\005\070\006\066\007\075\010\100" +
    "\017\073\022\067\036\071\037\074\066\076\001\002\000" +
    "\030\004\065\005\070\006\066\007\075\010\100\017\073" +
    "\020\145\022\067\036\071\037\074\066\076\001\002\000" +
    "\050\011\uffd9\020\uffd9\021\uffd9\022\uffd9\024\uffd9\025\uffd9" +
    "\026\uffd9\027\uffd9\031\uffd9\033\uffd9\051\uffd9\052\uffd9\054" +
    "\uffd9\055\uffd9\056\uffd9\057\uffd9\063\uffd9\064\uffd9\065\uffd9" +
    "\001\002\000\006\020\151\052\150\001\002\000\044\020" +
    "\uffd7\021\110\022\104\024\107\025\116\026\105\027\114" +
    "\031\115\033\117\052\uffd7\054\106\055\113\056\101\057" +
    "\111\063\120\064\102\065\103\001\002\000\026\004\065" +
    "\005\070\006\066\007\075\010\100\017\073\022\067\036" +
    "\071\037\074\066\076\001\002\000\050\011\uffda\020\uffda" +
    "\021\uffda\022\uffda\024\uffda\025\uffda\026\uffda\027\uffda\031" +
    "\uffda\033\uffda\051\uffda\052\uffda\054\uffda\055\uffda\056\uffda" +
    "\057\uffda\063\uffda\064\uffda\065\uffda\001\002\000\044\020" +
    "\uffd8\021\110\022\104\024\107\025\116\026\105\027\114" +
    "\031\115\033\117\052\uffd8\054\106\055\113\056\101\057" +
    "\111\063\120\064\102\065\103\001\002\000\042\021\110" +
    "\022\104\024\107\025\116\026\105\027\114\031\115\033" +
    "\117\051\154\054\106\055\113\056\101\057\111\063\120" +
    "\064\102\065\103\001\002\000\050\011\uffac\020\uffac\021" +
    "\uffac\022\uffac\024\uffac\025\uffac\026\uffac\027\uffac\031\uffac" +
    "\033\uffac\051\uffac\052\uffac\054\uffac\055\uffac\056\uffac\057" +
    "\uffac\063\uffac\064\uffac\065\uffac\001\002\000\042\020\156" +
    "\021\110\022\104\024\107\025\116\026\105\027\114\031" +
    "\115\033\117\054\106\055\113\056\101\057\111\063\120" +
    "\064\102\065\103\001\002\000\050\011\uffab\020\uffab\021" +
    "\uffab\022\uffab\024\uffab\025\uffab\026\uffab\027\uffab\031\uffab" +
    "\033\uffab\051\uffab\052\uffab\054\uffab\055\uffab\056\uffab\057" +
    "\uffab\063\uffab\064\uffab\065\uffab\001\002\000\050\011\uffc5" +
    "\020\uffc5\021\uffc5\022\uffc5\024\uffc5\025\uffc5\026\uffc5\027" +
    "\uffc5\031\uffc5\033\uffc5\051\uffc5\052\uffc5\054\uffc5\055\uffc5" +
    "\056\uffc5\057\uffc5\063\uffc5\064\uffc5\065\uffc5\001\002\000" +
    "\004\002\001\001\002\000\056\002\uffee\003\uffee\007\uffee" +
    "\012\uffee\013\uffee\014\uffee\015\uffee\016\uffee\034\uffee\035" +
    "\uffee\040\uffee\041\uffee\042\uffee\043\uffee\044\uffee\047\uffee" +
    "\053\uffee\060\uffee\061\uffee\062\uffee\072\uffee\073\uffee\001" +
    "\002\000\016\013\014\014\011\015\050\016\006\041\021" +
    "\072\035\001\002\000\004\055\164\001\002\000\004\007" +
    "\165\001\002\000\004\031\166\001\002\000\004\045\167" +
    "\001\002\000\004\044\170\001\002\000\004\017\171\001" +
    "\002\000\004\020\172\001\002\000\004\011\173\001\002" +
    "\000\056\002\uffe7\003\uffe7\007\uffe7\012\uffe7\013\uffe7\014" +
    "\uffe7\015\uffe7\016\uffe7\034\uffe7\035\uffe7\040\uffe7\041\uffe7" +
    "\042\uffe7\043\uffe7\044\uffe7\047\uffe7\053\uffe7\060\uffe7\061" +
    "\uffe7\062\uffe7\072\uffe7\073\uffe7\001\002\000\026\004\065" +
    "\005\070\006\066\007\075\010\100\017\073\022\067\036" +
    "\071\037\074\066\076\001\002\000\042\020\176\021\110" +
    "\022\104\024\107\025\116\026\105\027\114\031\115\033" +
    "\117\054\106\055\113\056\101\057\111\063\120\064\102" +
    "\065\103\001\002\000\004\046\177\001\002\000\052\003" +
    "\031\007\024\012\007\013\014\014\011\015\050\016\006" +
    "\034\005\035\055\040\023\041\021\042\042\043\056\044" +
    "\043\053\017\060\033\061\013\062\026\072\035\073\030" +
    "\001\002\000\054\003\031\007\024\012\007\013\014\014" +
    "\011\015\050\016\006\034\005\035\055\040\023\041\021" +
    "\042\042\043\056\044\043\047\201\053\017\060\033\061" +
    "\013\062\026\072\035\073\030\001\002\000\056\002\uffcf" +
    "\003\uffcf\007\uffcf\012\uffcf\013\uffcf\014\uffcf\015\uffcf\016" +
    "\uffcf\034\uffcf\035\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf" +
    "\044\uffcf\047\uffcf\053\uffcf\060\uffcf\061\uffcf\062\uffcf\072" +
    "\uffcf\073\uffcf\001\002\000\056\002\uffd3\003\uffd3\007\uffd3" +
    "\012\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3\034\uffd3\035" +
    "\uffd3\040\uffd3\041\uffd3\042\uffd3\043\uffd3\044\uffd3\047\uffd3" +
    "\053\uffd3\060\uffd3\061\uffd3\062\uffd3\072\uffd3\073\uffd3\001" +
    "\002\000\056\002\uffeb\003\uffeb\007\uffeb\012\uffeb\013\uffeb" +
    "\014\uffeb\015\uffeb\016\uffeb\034\uffeb\035\uffeb\040\uffeb\041" +
    "\uffeb\042\uffeb\043\uffeb\044\uffeb\047\uffeb\053\uffeb\060\uffeb" +
    "\061\uffeb\062\uffeb\072\uffeb\073\uffeb\001\002\000\004\017" +
    "\205\001\002\000\030\004\065\005\070\006\066\007\075" +
    "\010\100\017\073\020\206\022\067\036\071\037\074\066" +
    "\076\001\002\000\004\011\212\001\002\000\006\020\210" +
    "\052\150\001\002\000\004\011\211\001\002\000\056\002" +
    "\uffdc\003\uffdc\007\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc" +
    "\016\uffdc\034\uffdc\035\uffdc\040\uffdc\041\uffdc\042\uffdc\043" +
    "\uffdc\044\uffdc\047\uffdc\053\uffdc\060\uffdc\061\uffdc\062\uffdc" +
    "\072\uffdc\073\uffdc\001\002\000\056\002\uffdb\003\uffdb\007" +
    "\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb\034\uffdb" +
    "\035\uffdb\040\uffdb\041\uffdb\042\uffdb\043\uffdb\044\uffdb\047" +
    "\uffdb\053\uffdb\060\uffdb\061\uffdb\062\uffdb\072\uffdb\073\uffdb" +
    "\001\002\000\056\002\uffd0\003\uffd0\007\uffd0\012\uffd0\013" +
    "\uffd0\014\uffd0\015\uffd0\016\uffd0\034\uffd0\035\uffd0\040\uffd0" +
    "\041\uffd0\042\uffd0\043\uffd0\044\uffd0\047\uffd0\053\uffd0\060" +
    "\uffd0\061\uffd0\062\uffd0\072\uffd0\073\uffd0\001\002\000\042" +
    "\011\215\021\110\022\104\024\107\025\116\026\105\027" +
    "\114\031\115\033\117\054\106\055\113\056\101\057\111" +
    "\063\120\064\102\065\103\001\002\000\056\002\uffd1\003" +
    "\uffd1\007\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1\016\uffd1" +
    "\034\uffd1\035\uffd1\040\uffd1\041\uffd1\042\uffd1\043\uffd1\044" +
    "\uffd1\047\uffd1\053\uffd1\060\uffd1\061\uffd1\062\uffd1\072\uffd1" +
    "\073\uffd1\001\002\000\006\067\230\071\231\001\002\000" +
    "\026\004\065\005\070\006\066\007\075\010\100\017\073" +
    "\022\067\036\071\037\074\066\076\001\002\000\026\004" +
    "\065\005\070\006\066\007\075\010\100\017\073\022\067" +
    "\036\071\037\074\066\076\001\002\000\042\011\222\021" +
    "\110\022\104\024\107\025\116\026\105\027\114\031\115" +
    "\033\117\054\106\055\113\056\101\057\111\063\120\064" +
    "\102\065\103\001\002\000\100\002\uffe2\003\uffe2\004\uffe2" +
    "\005\uffe2\006\uffe2\007\uffe2\010\uffe2\012\uffe2\013\uffe2\014" +
    "\uffe2\015\uffe2\016\uffe2\017\uffe2\022\uffe2\034\uffe2\035\uffe2" +
    "\036\uffe2\037\uffe2\040\uffe2\041\uffe2\042\uffe2\043\uffe2\044" +
    "\uffe2\047\uffe2\053\uffe2\060\uffe2\061\uffe2\062\uffe2\066\uffe2" +
    "\072\uffe2\073\uffe2\001\002\000\042\021\110\022\104\024" +
    "\107\025\116\026\105\027\114\031\115\033\117\051\224" +
    "\054\106\055\113\056\101\057\111\063\120\064\102\065" +
    "\103\001\002\000\004\031\225\001\002\000\026\004\065" +
    "\005\070\006\066\007\075\010\100\017\073\022\067\036" +
    "\071\037\074\066\076\001\002\000\042\011\227\021\110" +
    "\022\104\024\107\025\116\026\105\027\114\031\115\033" +
    "\117\054\106\055\113\056\101\057\111\063\120\064\102" +
    "\065\103\001\002\000\056\002\uffe1\003\uffe1\007\uffe1\012" +
    "\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1\034\uffe1\035\uffe1" +
    "\040\uffe1\041\uffe1\042\uffe1\043\uffe1\044\uffe1\047\uffe1\053" +
    "\uffe1\060\uffe1\061\uffe1\062\uffe1\072\uffe1\073\uffe1\001\002" +
    "\000\004\017\236\001\002\000\004\017\232\001\002\000" +
    "\026\004\065\005\070\006\066\007\075\010\100\017\073" +
    "\022\067\036\071\037\074\066\076\001\002\000\042\020" +
    "\234\021\110\022\104\024\107\025\116\026\105\027\114" +
    "\031\115\033\117\054\106\055\113\056\101\057\111\063" +
    "\120\064\102\065\103\001\002\000\004\011\235\001\002" +
    "\000\056\002\uffcc\003\uffcc\007\uffcc\012\uffcc\013\uffcc\014" +
    "\uffcc\015\uffcc\016\uffcc\034\uffcc\035\uffcc\040\uffcc\041\uffcc" +
    "\042\uffcc\043\uffcc\044\uffcc\047\uffcc\053\uffcc\060\uffcc\061" +
    "\uffcc\062\uffcc\072\uffcc\073\uffcc\001\002\000\026\004\065" +
    "\005\070\006\066\007\075\010\100\017\073\022\067\036" +
    "\071\037\074\066\076\001\002\000\042\020\240\021\110" +
    "\022\104\024\107\025\116\026\105\027\114\031\115\033" +
    "\117\054\106\055\113\056\101\057\111\063\120\064\102" +
    "\065\103\001\002\000\004\011\241\001\002\000\056\002" +
    "\uffcd\003\uffcd\007\uffcd\012\uffcd\013\uffcd\014\uffcd\015\uffcd" +
    "\016\uffcd\034\uffcd\035\uffcd\040\uffcd\041\uffcd\042\uffcd\043" +
    "\uffcd\044\uffcd\047\uffcd\053\uffcd\060\uffcd\061\uffcd\062\uffcd" +
    "\072\uffcd\073\uffcd\001\002\000\026\004\065\005\070\006" +
    "\066\007\075\010\100\017\073\022\067\036\071\037\074" +
    "\066\076\001\002\000\042\020\244\021\110\022\104\024" +
    "\107\025\116\026\105\027\114\031\115\033\117\054\106" +
    "\055\113\056\101\057\111\063\120\064\102\065\103\001" +
    "\002\000\004\046\245\001\002\000\052\003\031\007\024" +
    "\012\007\013\014\014\011\015\050\016\006\034\005\035" +
    "\055\040\023\041\021\042\042\043\056\044\043\053\017" +
    "\060\033\061\013\062\026\072\035\073\030\001\002\000" +
    "\054\003\031\007\024\012\007\013\014\014\011\015\050" +
    "\016\006\034\005\035\055\040\023\041\021\042\042\043" +
    "\056\044\043\047\247\053\017\060\033\061\013\062\026" +
    "\072\035\073\030\001\002\000\056\002\uffd6\003\uffd6\007" +
    "\uffd6\012\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6\034\uffd6" +
    "\035\uffd6\040\uffd6\041\uffd6\042\uffd6\043\uffd6\044\uffd6\047" +
    "\uffd6\053\uffd6\060\uffd6\061\uffd6\062\uffd6\072\uffd6\073\uffd6" +
    "\001\002\000\004\030\251\001\002\000\016\013\014\014" +
    "\011\015\050\016\006\041\021\072\035\001\002\000\006" +
    "\031\254\050\253\001\002\000\004\051\257\001\002\000" +
    "\026\004\065\005\070\006\066\007\075\010\100\017\073" +
    "\022\067\036\071\037\074\066\076\001\002\000\042\011" +
    "\256\021\110\022\104\024\107\025\116\026\105\027\114" +
    "\031\115\033\117\054\106\055\113\056\101\057\111\063" +
    "\120\064\102\065\103\001\002\000\056\002\uffe9\003\uffe9" +
    "\007\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\034" +
    "\uffe9\035\uffe9\040\uffe9\041\uffe9\042\uffe9\043\uffe9\044\uffe9" +
    "\047\uffe9\053\uffe9\060\uffe9\061\uffe9\062\uffe9\072\uffe9\073" +
    "\uffe9\001\002\000\004\031\260\001\002\000\004\050\261" +
    "\001\002\000\026\004\065\005\070\006\066\007\075\010" +
    "\100\017\073\022\067\036\071\037\074\066\076\001\002" +
    "\000\006\051\265\052\264\001\002\000\044\021\110\022" +
    "\104\024\107\025\116\026\105\027\114\031\115\033\117" +
    "\051\uffe5\052\uffe5\054\106\055\113\056\101\057\111\063" +
    "\120\064\102\065\103\001\002\000\026\004\065\005\070" +
    "\006\066\007\075\010\100\017\073\022\067\036\071\037" +
    "\074\066\076\001\002\000\004\011\266\001\002\000\056" +
    "\002\uffe8\003\uffe8\007\uffe8\012\uffe8\013\uffe8\014\uffe8\015" +
    "\uffe8\016\uffe8\034\uffe8\035\uffe8\040\uffe8\041\uffe8\042\uffe8" +
    "\043\uffe8\044\uffe8\047\uffe8\053\uffe8\060\uffe8\061\uffe8\062" +
    "\uffe8\072\uffe8\073\uffe8\001\002\000\044\021\110\022\104" +
    "\024\107\025\116\026\105\027\114\031\115\033\117\051" +
    "\uffe6\052\uffe6\054\106\055\113\056\101\057\111\063\120" +
    "\064\102\065\103\001\002\000\004\007\271\001\002\000" +
    "\004\031\220\001\002\000\026\004\065\005\070\006\066" +
    "\007\075\010\100\017\073\022\067\036\071\037\074\066" +
    "\076\001\002\000\042\011\274\021\110\022\104\024\107" +
    "\025\116\026\105\027\114\031\115\033\117\054\106\055" +
    "\113\056\101\057\111\063\120\064\102\065\103\001\002" +
    "\000\004\007\275\001\002\000\004\031\303\001\002\000" +
    "\004\020\277\001\002\000\004\046\300\001\002\000\052" +
    "\003\031\007\024\012\007\013\014\014\011\015\050\016" +
    "\006\034\005\035\055\040\023\041\021\042\042\043\056" +
    "\044\043\053\017\060\033\061\013\062\026\072\035\073" +
    "\030\001\002\000\054\003\031\007\024\012\007\013\014" +
    "\014\011\015\050\016\006\034\005\035\055\040\023\041" +
    "\021\042\042\043\056\044\043\047\302\053\017\060\033" +
    "\061\013\062\026\072\035\073\030\001\002\000\056\002" +
    "\uffd5\003\uffd5\007\uffd5\012\uffd5\013\uffd5\014\uffd5\015\uffd5" +
    "\016\uffd5\034\uffd5\035\uffd5\040\uffd5\041\uffd5\042\uffd5\043" +
    "\uffd5\044\uffd5\047\uffd5\053\uffd5\060\uffd5\061\uffd5\062\uffd5" +
    "\072\uffd5\073\uffd5\001\002\000\026\004\065\005\070\006" +
    "\066\007\075\010\100\017\073\022\067\036\071\037\074" +
    "\066\076\001\002\000\042\020\uffd4\021\110\022\104\024" +
    "\107\025\116\026\105\027\114\031\115\033\117\054\106" +
    "\055\113\056\101\057\111\063\120\064\102\065\103\001" +
    "\002\000\056\002\uffd2\003\uffd2\007\uffd2\012\uffd2\013\uffd2" +
    "\014\uffd2\015\uffd2\016\uffd2\034\uffd2\035\uffd2\040\uffd2\041" +
    "\uffd2\042\uffd2\043\uffd2\044\uffd2\047\uffd2\053\uffd2\060\uffd2" +
    "\061\uffd2\062\uffd2\072\uffd2\073\uffd2\001\002\000\026\004" +
    "\065\005\070\006\066\007\075\010\100\017\073\022\067" +
    "\036\071\037\074\066\076\001\002\000\042\020\310\021" +
    "\110\022\104\024\107\025\116\026\105\027\114\031\115" +
    "\033\117\054\106\055\113\056\101\057\111\063\120\064" +
    "\102\065\103\001\002\000\004\011\311\001\002\000\056" +
    "\002\uffea\003\uffea\007\uffea\012\uffea\013\uffea\014\uffea\015" +
    "\uffea\016\uffea\034\uffea\035\uffea\040\uffea\041\uffea\042\uffea" +
    "\043\uffea\044\uffea\047\uffea\053\uffea\060\uffea\061\uffea\062" +
    "\uffea\072\uffea\073\uffea\001\002\000\004\017\313\001\002" +
    "\000\020\013\014\014\011\015\050\016\006\020\315\041" +
    "\021\072\035\001\002\000\006\020\324\052\323\001\002" +
    "\000\004\046\320\001\002\000\004\007\317\001\002\000" +
    "\006\020\uffdd\052\uffdd\001\002\000\052\003\031\007\024" +
    "\012\007\013\014\014\011\015\050\016\006\034\005\035" +
    "\055\040\023\041\021\042\042\043\056\044\043\053\017" +
    "\060\033\061\013\062\026\072\035\073\030\001\002\000" +
    "\054\003\031\007\024\012\007\013\014\014\011\015\050" +
    "\016\006\034\005\035\055\040\023\041\021\042\042\043" +
    "\056\044\043\047\322\053\017\060\033\061\013\062\026" +
    "\072\035\073\030\001\002\000\056\002\uffdf\003\uffdf\007" +
    "\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\034\uffdf" +
    "\035\uffdf\040\uffdf\041\uffdf\042\uffdf\043\uffdf\044\uffdf\047" +
    "\uffdf\053\uffdf\060\uffdf\061\uffdf\062\uffdf\072\uffdf\073\uffdf" +
    "\001\002\000\016\013\014\014\011\015\050\016\006\041" +
    "\021\072\035\001\002\000\004\046\325\001\002\000\052" +
    "\003\031\007\024\012\007\013\014\014\011\015\050\016" +
    "\006\034\005\035\055\040\023\041\021\042\042\043\056" +
    "\044\043\053\017\060\033\061\013\062\026\072\035\073" +
    "\030\001\002\000\054\003\031\007\024\012\007\013\014" +
    "\014\011\015\050\016\006\034\005\035\055\040\023\041" +
    "\021\042\042\043\056\044\043\047\327\053\017\060\033" +
    "\061\013\062\026\072\035\073\030\001\002\000\056\002" +
    "\uffe0\003\uffe0\007\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0" +
    "\016\uffe0\034\uffe0\035\uffe0\040\uffe0\041\uffe0\042\uffe0\043" +
    "\uffe0\044\uffe0\047\uffe0\053\uffe0\060\uffe0\061\uffe0\062\uffe0" +
    "\072\uffe0\073\uffe0\001\002\000\004\007\331\001\002\000" +
    "\006\020\uffde\052\uffde\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\327\000\060\002\050\003\017\004\014\005\043\006" +
    "\036\007\035\010\031\011\024\012\026\013\044\014\033" +
    "\015\037\016\040\020\007\021\015\022\052\023\051\024" +
    "\053\025\003\027\021\031\011\033\046\035\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\054\004\061" +
    "\005\043\006\036\007\035\010\031\011\024\012\026\013" +
    "\044\014\033\015\037\016\040\020\007\021\015\022\052" +
    "\023\051\024\053\025\003\027\021\031\011\033\046\035" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\026" +
    "\213\035\071\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\056\003" +
    "\057\004\014\005\043\006\036\007\035\010\031\011\024" +
    "\012\026\013\044\014\033\015\037\016\040\020\007\021" +
    "\015\022\052\023\051\024\053\025\003\027\021\031\011" +
    "\033\046\035\045\001\001\000\054\004\061\005\043\006" +
    "\036\007\035\010\031\011\024\012\026\013\044\014\033" +
    "\015\037\016\040\020\007\021\015\022\052\023\051\024" +
    "\053\025\003\027\021\031\011\033\046\035\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\026\076\035\071\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\026\156\035\071\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\026\154" +
    "\035\071\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\026\141\035\071\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\026\140\035\071\001\001\000\006\026" +
    "\137\035\071\001\001\000\006\026\136\035\071\001\001" +
    "\000\006\026\135\035\071\001\001\000\006\026\134\035" +
    "\071\001\001\000\006\026\133\035\071\001\001\000\006" +
    "\026\132\035\071\001\001\000\006\026\131\035\071\001" +
    "\001\000\006\026\130\035\071\001\001\000\002\001\001" +
    "\000\006\026\126\035\071\001\001\000\006\026\125\035" +
    "\071\001\001\000\002\001\001\000\006\026\122\035\071" +
    "\001\001\000\006\026\121\035\071\001\001\000\006\026" +
    "\120\035\071\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\026\124\035\071\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\026\152\035\071\001\001\000\010" +
    "\026\146\034\145\035\071\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\026\151\035\071" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\025\162\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\026\174\035\071\001\001\000\002\001" +
    "\001\000\002\001\001\000\056\003\177\004\014\005\043" +
    "\006\036\007\035\010\031\011\024\012\026\013\044\014" +
    "\033\015\037\016\040\020\007\021\015\022\052\023\051" +
    "\024\053\025\003\027\021\031\011\033\046\035\045\001" +
    "\001\000\054\004\061\005\043\006\036\007\035\010\031" +
    "\011\024\012\026\013\044\014\033\015\037\016\040\020" +
    "\007\021\015\022\052\023\051\024\053\025\003\027\021" +
    "\031\011\033\046\035\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\026\146\034\206\035\071\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\026\222\035\071\001\001" +
    "\000\006\026\220\035\071\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\026\225\035\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\026\232" +
    "\035\071\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\026\236\035\071\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\026" +
    "\242\035\071\001\001\000\002\001\001\000\002\001\001" +
    "\000\056\003\245\004\014\005\043\006\036\007\035\010" +
    "\031\011\024\012\026\013\044\014\033\015\037\016\040" +
    "\020\007\021\015\022\052\023\051\024\053\025\003\027" +
    "\021\031\011\033\046\035\045\001\001\000\054\004\061" +
    "\005\043\006\036\007\035\010\031\011\024\012\026\013" +
    "\044\014\033\015\037\016\040\020\007\021\015\022\052" +
    "\023\051\024\053\025\003\027\021\031\011\033\046\035" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\025\251\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\026\254\035\071\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\026" +
    "\262\030\261\035\071\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\026\266\035\071\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\271" +
    "\001\001\000\002\001\001\000\006\026\272\035\071\001" +
    "\001\000\002\001\001\000\004\017\275\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\056\003" +
    "\300\004\014\005\043\006\036\007\035\010\031\011\024" +
    "\012\026\013\044\014\033\015\037\016\040\020\007\021" +
    "\015\022\052\023\051\024\053\025\003\027\021\031\011" +
    "\033\046\035\045\001\001\000\054\004\061\005\043\006" +
    "\036\007\035\010\031\011\024\012\026\013\044\014\033" +
    "\015\037\016\040\020\007\021\015\022\052\023\051\024" +
    "\053\025\003\027\021\031\011\033\046\035\045\001\001" +
    "\000\002\001\001\000\006\026\303\035\071\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\026\306\035\071" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\025\315\032\313\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\056\003\320\004\014\005\043\006\036" +
    "\007\035\010\031\011\024\012\026\013\044\014\033\015" +
    "\037\016\040\020\007\021\015\022\052\023\051\024\053" +
    "\025\003\027\021\031\011\033\046\035\045\001\001\000" +
    "\054\004\061\005\043\006\036\007\035\010\031\011\024" +
    "\012\026\013\044\014\033\015\037\016\040\020\007\021" +
    "\015\022\052\023\051\024\053\025\003\027\021\031\011" +
    "\033\046\035\045\001\001\000\002\001\001\000\004\025" +
    "\327\001\001\000\002\001\001\000\056\003\325\004\014" +
    "\005\043\006\036\007\035\010\031\011\024\012\026\013" +
    "\044\014\033\015\037\016\040\020\007\021\015\022\052" +
    "\023\051\024\053\025\003\027\021\031\011\033\046\035" +
    "\045\001\001\000\054\004\061\005\043\006\036\007\035" +
    "\010\031\011\024\012\026\013\044\014\033\015\037\016" +
    "\040\020\007\021\015\022\052\023\051\024\053\025\003" +
    "\027\021\031\011\033\046\035\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    scanner s;
    parser(scanner s){this.s = s;}

    public LinkedList<Errores> listaErrores = new LinkedList<>();
    
    public void syntax_error(Symbol s){
        listaErrores.add(new Errores("SINTACTICO RECUPERABLE", "No se esperaba el componente " + s.value, s.left, s.right));
    }

    public void unrecovered_syntax_error (Symbol s){
        listaErrores.add(new Errores("SINTACTICO NO RECUPERABLE", "No se esperaba el componente " + s.value, s.left, s.right));
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> start_val = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INSTRUCCIONES 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a; RESULT.add(b);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new LinkedList<>(); RESULT.add(a);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= IMPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= DECLARACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= ASIGNACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= DECLARACION_VEC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= ASIGNACION_VEC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= DECLARACION_LIST 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= SIF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= CFOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= BREAKK 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= CONTINUEE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCION ::= RETURNN 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCION ::= SDO_WHILE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCCION ::= SWHILE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INSTRUCCION ::= METODO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INSTRUCCION ::= STARTWITHH 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INSTRUCCION ::= LLAMADA FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INSTRUCCION ::= APPENDD 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INSTRUCCION ::= REMOVEE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INSTRUCCION ::= error FINCADENA 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // IMPRESION ::= IMPRIMIR PAR1 EXPRESION PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  RESULT = new Print(a, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= MUTABILIDAD ID DOSPUNTOS TIPOS IGUAL EXPRESION FINCADENA 
            {
              Instruccion RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new Declaracion(m, b, c, a, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION_VEC ::= MUTABILIDAD ID DOSPUNTOS TIPOS CORCHETE1 CORCHETE2 IGUAL CORCHETE1 LISTA_VALORES CORCHETE2 FINCADENA 
            {
              Instruccion RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int valoresleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valoresright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> valores = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new DeclaracionVec(m, b, valores, 1, a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VEC",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION_LIST ::= LIST MENOR TIPOS MAYOR ID IGUAL NEW LIST PAR1 PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		 RESULT = new DeclaracionList(b, a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_LIST",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LISTA_VALORES ::= LISTA_VALORES COMA EXPRESION 
            {
              LinkedList<Instruccion> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> lista = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion exp = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 lista.add(exp); RESULT = lista; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_VALORES",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LISTA_VALORES ::= EXPRESION 
            {
              LinkedList<Instruccion> RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion exp = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(exp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_VALORES",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // MUTABILIDAD ::= CONST 
            {
              String RESULT =null;
		  RESULT = "CONST";  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MUTABILIDAD",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // MUTABILIDAD ::= VAR 
            {
              String RESULT =null;
		  RESULT = "VAR";  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MUTABILIDAD",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ASIGNACION ::= ID IGUAL EXPRESION FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT=new AsignacionVar(a, b, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ASIGNACION_VEC ::= ID CORCHETE1 EXPRESION CORCHETE2 IGUAL EXPRESION FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT=new AsignacionVec(a, b, c, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_VEC",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // METODO ::= TIPOS ID PAR1 PARAMS PAR2 LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<HashMap> p = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT= new Metodo(b, p, c, a, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("METODO",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // METODO ::= TIPOS ID PAR1 PAR2 LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT= new Metodo(b, new LinkedList<HashMap>(), c, a, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("METODO",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // PARAMS ::= PARAMS COMA TIPOS ID 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<HashMap> a = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                                            RESULT = a;
                                            var hm2= new HashMap<String, Object>();
                                            hm2.put("id", c);
                                            hm2.put("tipo", b);
                                            RESULT.add(hm2);
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // PARAMS ::= TIPOS ID 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new LinkedList<HashMap>(); 
                                            var hm = new HashMap<String, Object>();
                                            hm.put("id",b);
                                            hm.put("tipo", a);
                                            RESULT.add(hm);
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // STARTWITHH ::= STARTWITH ID PAR1 PARAMSCALL PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new StartWith(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STARTWITHH",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // STARTWITHH ::= STARTWITH ID PAR1 PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		   RESULT = new StartWith(a, new LinkedList<Instruccion>(), aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STARTWITHH",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // LLAMADA ::= ID PAR1 PARAMSCALL PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT= new Llamada(a, b, aleft, aright);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADA",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // LLAMADA ::= ID PAR1 PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  RESULT= new Llamada(a, new LinkedList<Instruccion>(), aleft, aright);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADA",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // PARAMSCALL ::= PARAMSCALL COMA EXPRESION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a;
                                                    RESULT.add(e);
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMSCALL",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // PARAMSCALL ::= EXPRESION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new LinkedList<Instruccion>(); 
                                                    RESULT.add(a);
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMSCALL",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SIF ::= IF PAR1 EXPRESION PAR2 LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new If(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CFOR ::= FOR PAR1 ASIGNACION EXPRESION FINCADENA ACTUALIZA_FOR PAR2 LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new For(a, b, c, d, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CFOR",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ACTUALIZA_FOR ::= ID IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=new AsignacionVar(a, b, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZA_FOR",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // BREAKK ::= BREAK FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		    RESULT = new Break(aleft, aright);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BREAKK",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CONTINUEE ::= CONTINUE FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		    RESULT = new Continue(aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTINUEE",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // RETURNN ::= RETURN EXPRESION FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		    RESULT = new Return(a, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETURNN",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // RETURNN ::= RETURN FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		    RESULT = new Return(null, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETURNN",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SWHILE ::= WHILE PAR1 EXPRESION PAR2 LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new While(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SWHILE",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SDO_WHILE ::= DO LLAVE1 INSTRUCCIONES LLAVE2 WHILE PAR1 EXPRESION PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new DoWhile(b, a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SDO_WHILE",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // APPENDD ::= ID PUNTO APPEND PAR1 EXPRESION PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new Append(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("APPENDD",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // REMOVEE ::= ID PUNTO REMOVE PAR1 EXPRESION PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new Remove(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("REMOVEE",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // TIPOS ::= INT 
            {
              Tipo RESULT =null;
		  RESULT = new Tipo(tipoDato.ENTERO);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // TIPOS ::= DOUBLE 
            {
              Tipo RESULT =null;
		  RESULT = new Tipo(tipoDato.DECIMAL);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // TIPOS ::= STRING 
            {
              Tipo RESULT =null;
		  RESULT = new Tipo(tipoDato.CADENA);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // TIPOS ::= CHAR 
            {
              Tipo RESULT =null;
		  RESULT = new Tipo(tipoDato.CARACTER);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // TIPOS ::= BOOL 
            {
              Tipo RESULT =null;
		  RESULT = new Tipo(tipoDato.BOOLEANO);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // TIPOS ::= VOID 
            {
              Tipo RESULT =null;
		  RESULT = new Tipo(tipoDato.VOID);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXPRESION ::= MENOS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Aritmeticas(a, OperadoresAritmeticos.NEGACION, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXPRESION ::= EXPRESION POTENCIA EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.POTENCIA, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXPRESION ::= EXPRESION DIVISION EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.DIVISION, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXPRESION ::= EXPRESION MULTIPLICACION EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.MULTIPLICACION, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXPRESION ::= EXPRESION MODULO EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.MODULO, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXPRESION ::= EXPRESION MAS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.SUMA, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXPRESION ::= EXPRESION MENOS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.RESTA, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXPRESION ::= EXPRESION IGUAL IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Relacionales(a, b, OperadoresRelacionales.EQUALS, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXPRESION ::= EXPRESION DIFERENTE EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Relacionales(a, b, OperadoresRelacionales.DIFERENTE, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXPRESION ::= EXPRESION MENORIGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Relacionales(a, b, OperadoresRelacionales.MENORIGUAL, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXPRESION ::= EXPRESION MAYORIGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Relacionales(a, b, OperadoresRelacionales.MAYORIGUAL, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXPRESION ::= EXPRESION MENOR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Relacionales(a, b, OperadoresRelacionales.MENOR, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXPRESION ::= EXPRESION MAYOR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Relacionales(a, b, OperadoresRelacionales.MAYOR, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXPRESION ::= NOT EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Logicos(a, OperadoresLogicos.NOT, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXPRESION ::= EXPRESION XOR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Logicos(a, b, OperadoresLogicos.XOR, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXPRESION ::= EXPRESION AND EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Logicos(a, b, OperadoresLogicos.AND, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXPRESION ::= EXPRESION OR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Logicos(a, b, OperadoresLogicos.OR, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXPRESION ::= LLAMADA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXPRESION ::= ENTERO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Nativo(Integer.parseInt(a), new Tipo(tipoDato.ENTERO), aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXPRESION ::= DECIMAL 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Nativo(new Double(a), new Tipo(tipoDato.DECIMAL), aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXPRESION ::= CADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Nativo(a, new Tipo(tipoDato.CADENA), aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXPRESION ::= CARACTER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Nativo(a, new Tipo(tipoDato.CARACTER), aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXPRESION ::= TRUE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(true, new Tipo(tipoDato.BOOLEANO), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXPRESION ::= FALSE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(false, new Tipo(tipoDato.BOOLEANO), aleft, aright );    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXPRESION ::= ID 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new AccesoVar(a, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXPRESION ::= ID CORCHETE1 EXPRESION CORCHETE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new AccesoVec(a, b, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXPRESION ::= PAR1 EXPRESION PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = a;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
