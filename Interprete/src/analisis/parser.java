
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analisis;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import abstracto.Instruccion;
import simbolo.Tipo;
import simbolo.tipoDato;
import excepciones.Errores;
import instrucciones.Print;
import instrucciones.Declaracion;
import instrucciones.AsignacionVar;
import instrucciones.If;
import instrucciones.For;
import instrucciones.Break;
import instrucciones.Continue;
import instrucciones.While;
import instrucciones.DoWhile;
import instrucciones.DeclaracionVec;
import instrucciones.AsignacionVec;
import instrucciones.DeclaracionList;
import instrucciones.Append;
import instrucciones.Remove;
import expresiones.Nativo;
import expresiones.Aritmeticas;
import expresiones.OperadoresAritmeticos;
import expresiones.Relacionales;
import expresiones.OperadoresRelacionales;
import expresiones.AccesoVar;
import expresiones.Logicos;
import expresiones.OperadoresLogicos;
import expresiones.AccesoVec;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\105\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\004" +
    "\000\002\005\007\000\002\006\011\000\002\010\015\000" +
    "\002\012\015\000\002\027\005\000\002\027\003\000\002" +
    "\026\003\000\002\026\003\000\002\007\006\000\002\011" +
    "\011\000\002\013\011\000\002\016\014\000\002\017\005" +
    "\000\002\020\004\000\002\021\004\000\002\014\011\000" +
    "\002\015\013\000\002\022\011\000\002\023\011\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\025\004\000\002\025\005" +
    "\000\002\025\005\000\002\025\005\000\002\025\005\000" +
    "\002\025\005\000\002\025\005\000\002\025\006\000\002" +
    "\025\005\000\002\025\005\000\002\025\005\000\002\025" +
    "\005\000\002\025\005\000\002\025\004\000\002\025\005" +
    "\000\002\025\005\000\002\025\005\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\006\000\002\025\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\254\000\032\003\031\007\021\012\016\034\030\035" +
    "\037\040\017\042\011\043\023\044\007\053\035\060\027" +
    "\061\006\001\002\000\036\002\ufff3\003\ufff3\007\ufff3\012" +
    "\ufff3\034\ufff3\035\ufff3\040\ufff3\042\ufff3\043\ufff3\044\ufff3" +
    "\047\ufff3\053\ufff3\060\ufff3\061\ufff3\001\002\000\036\002" +
    "\ufffe\003\ufffe\007\ufffe\012\ufffe\034\ufffe\035\ufffe\040\ufffe" +
    "\042\ufffe\043\ufffe\044\ufffe\047\ufffe\053\ufffe\060\ufffe\061" +
    "\ufffe\001\002\000\004\011\256\001\002\000\004\054\244" +
    "\001\002\000\036\002\ufff5\003\ufff5\007\ufff5\012\ufff5\034" +
    "\ufff5\035\ufff5\040\ufff5\042\ufff5\043\ufff5\044\ufff5\047\ufff5" +
    "\053\ufff5\060\ufff5\061\ufff5\001\002\000\004\017\236\001" +
    "\002\000\036\002\ufff2\003\ufff2\007\ufff2\012\ufff2\034\ufff2" +
    "\035\ufff2\040\ufff2\042\ufff2\043\ufff2\044\ufff2\047\ufff2\053" +
    "\ufff2\060\ufff2\061\ufff2\001\002\000\036\002\ufffc\003\ufffc" +
    "\007\ufffc\012\ufffc\034\ufffc\035\ufffc\040\ufffc\042\ufffc\043" +
    "\ufffc\044\ufffc\047\ufffc\053\ufffc\060\ufffc\061\ufffc\001\002" +
    "\000\034\002\000\003\031\007\021\012\016\034\030\035" +
    "\037\040\017\042\011\043\023\044\007\053\035\060\027" +
    "\061\006\001\002\000\036\002\ufff7\003\ufff7\007\ufff7\012" +
    "\ufff7\034\ufff7\035\ufff7\040\ufff7\042\ufff7\043\ufff7\044\ufff7" +
    "\047\ufff7\053\ufff7\060\ufff7\061\ufff7\001\002\000\004\017" +
    "\232\001\002\000\004\017\224\001\002\000\036\002\ufff0" +
    "\003\ufff0\007\ufff0\012\ufff0\034\ufff0\035\ufff0\040\ufff0\042" +
    "\ufff0\043\ufff0\044\ufff0\047\ufff0\053\ufff0\060\ufff0\061\ufff0" +
    "\001\002\000\010\031\141\050\203\067\204\001\002\000" +
    "\036\002\ufff8\003\ufff8\007\ufff8\012\ufff8\034\ufff8\035\ufff8" +
    "\040\ufff8\042\ufff8\043\ufff8\044\ufff8\047\ufff8\053\ufff8\060" +
    "\ufff8\061\ufff8\001\002\000\004\046\173\001\002\000\036" +
    "\002\ufff4\003\ufff4\007\ufff4\012\ufff4\034\ufff4\035\ufff4\040" +
    "\ufff4\042\ufff4\043\ufff4\044\ufff4\047\ufff4\053\ufff4\060\ufff4" +
    "\061\ufff4\001\002\000\036\002\ufffb\003\ufffb\007\ufffb\012" +
    "\ufffb\034\ufffb\035\ufffb\040\ufffb\042\ufffb\043\ufffb\044\ufffb" +
    "\047\ufffb\053\ufffb\060\ufffb\061\ufffb\001\002\000\036\002" +
    "\ufffa\003\ufffa\007\ufffa\012\ufffa\034\ufffa\035\ufffa\040\ufffa" +
    "\042\ufffa\043\ufffa\044\ufffa\047\ufffa\053\ufffa\060\ufffa\061" +
    "\ufffa\001\002\000\004\011\172\001\002\000\004\007\uffe8" +
    "\001\002\000\004\011\171\001\002\000\004\007\144\001" +
    "\002\000\036\002\ufff6\003\ufff6\007\ufff6\012\ufff6\034\ufff6" +
    "\035\ufff6\040\ufff6\042\ufff6\043\ufff6\044\ufff6\047\ufff6\053" +
    "\ufff6\060\ufff6\061\ufff6\001\002\000\036\002\ufffd\003\ufffd" +
    "\007\ufffd\012\ufffd\034\ufffd\035\ufffd\040\ufffd\042\ufffd\043" +
    "\ufffd\044\ufffd\047\ufffd\053\ufffd\060\ufffd\061\ufffd\001\002" +
    "\000\004\017\043\001\002\000\036\002\ufff9\003\ufff9\007" +
    "\ufff9\012\ufff9\034\ufff9\035\ufff9\040\ufff9\042\ufff9\043\ufff9" +
    "\044\ufff9\047\ufff9\053\ufff9\060\ufff9\061\ufff9\001\002\000" +
    "\004\007\uffe7\001\002\000\004\002\042\001\002\000\036" +
    "\002\ufff1\003\ufff1\007\ufff1\012\ufff1\034\ufff1\035\ufff1\040" +
    "\ufff1\042\ufff1\043\ufff1\044\ufff1\047\ufff1\053\ufff1\060\ufff1" +
    "\061\ufff1\001\002\000\004\002\001\001\002\000\004\007" +
    "\044\001\002\000\004\031\141\001\002\000\026\004\046" +
    "\005\052\006\047\007\055\010\060\017\053\022\050\036" +
    "\051\037\054\065\056\001\002\000\050\011\uffc3\020\uffc3" +
    "\021\uffc3\022\uffc3\024\uffc3\025\uffc3\026\uffc3\027\uffc3\031" +
    "\uffc3\033\uffc3\051\uffc3\052\uffc3\054\uffc3\055\uffc3\056\uffc3" +
    "\057\uffc3\062\uffc3\063\uffc3\064\uffc3\001\002\000\050\011" +
    "\uffc4\020\uffc4\021\uffc4\022\uffc4\024\uffc4\025\uffc4\026\uffc4" +
    "\027\uffc4\031\uffc4\033\uffc4\051\uffc4\052\uffc4\054\uffc4\055" +
    "\uffc4\056\uffc4\057\uffc4\062\uffc4\063\uffc4\064\uffc4\001\002" +
    "\000\026\004\046\005\052\006\047\007\055\010\060\017" +
    "\053\022\050\036\051\037\054\065\056\001\002\000\050" +
    "\011\uffc1\020\uffc1\021\uffc1\022\uffc1\024\uffc1\025\uffc1\026" +
    "\uffc1\027\uffc1\031\uffc1\033\uffc1\051\uffc1\052\uffc1\054\uffc1" +
    "\055\uffc1\056\uffc1\057\uffc1\062\uffc1\063\uffc1\064\uffc1\001" +
    "\002\000\050\011\uffc5\020\uffc5\021\uffc5\022\uffc5\024\uffc5" +
    "\025\uffc5\026\uffc5\027\uffc5\031\uffc5\033\uffc5\051\uffc5\052" +
    "\uffc5\054\uffc5\055\uffc5\056\uffc5\057\uffc5\062\uffc5\063\uffc5" +
    "\064\uffc5\001\002\000\026\004\046\005\052\006\047\007" +
    "\055\010\060\017\053\022\050\036\051\037\054\065\056" +
    "\001\002\000\050\011\uffc0\020\uffc0\021\uffc0\022\uffc0\024" +
    "\uffc0\025\uffc0\026\uffc0\027\uffc0\031\uffc0\033\uffc0\051\uffc0" +
    "\052\uffc0\054\uffc0\055\uffc0\056\uffc0\057\uffc0\062\uffc0\063" +
    "\uffc0\064\uffc0\001\002\000\052\011\uffbf\020\uffbf\021\uffbf" +
    "\022\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf\031\uffbf\033" +
    "\uffbf\050\133\051\uffbf\052\uffbf\054\uffbf\055\uffbf\056\uffbf" +
    "\057\uffbf\062\uffbf\063\uffbf\064\uffbf\001\002\000\026\004" +
    "\046\005\052\006\047\007\055\010\060\017\053\022\050" +
    "\036\051\037\054\065\056\001\002\000\042\011\073\021" +
    "\070\022\064\024\067\025\076\026\065\027\074\031\075" +
    "\033\077\054\066\055\072\056\061\057\071\062\100\063" +
    "\062\064\063\001\002\000\050\011\uffc2\020\uffc2\021\uffc2" +
    "\022\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2\031\uffc2\033" +
    "\uffc2\051\uffc2\052\uffc2\054\uffc2\055\uffc2\056\uffc2\057\uffc2" +
    "\062\uffc2\063\uffc2\064\uffc2\001\002\000\026\004\046\005" +
    "\052\006\047\007\055\010\060\017\053\022\050\036\051" +
    "\037\054\065\056\001\002\000\026\004\046\005\052\006" +
    "\047\007\055\010\060\017\053\022\050\036\051\037\054" +
    "\065\056\001\002\000\026\004\046\005\052\006\047\007" +
    "\055\010\060\017\053\022\050\036\051\037\054\065\056" +
    "\001\002\000\026\004\046\005\052\006\047\007\055\010" +
    "\060\017\053\022\050\036\051\037\054\065\056\001\002" +
    "\000\026\004\046\005\052\006\047\007\055\010\060\017" +
    "\053\022\050\036\051\037\054\065\056\001\002\000\026" +
    "\004\046\005\052\006\047\007\055\010\060\017\053\022" +
    "\050\036\051\037\054\065\056\001\002\000\026\004\046" +
    "\005\052\006\047\007\055\010\060\017\053\022\050\036" +
    "\051\037\054\065\056\001\002\000\026\004\046\005\052" +
    "\006\047\007\055\010\060\017\053\022\050\036\051\037" +
    "\054\065\056\001\002\000\026\004\046\005\052\006\047" +
    "\007\055\010\060\017\053\022\050\036\051\037\054\065" +
    "\056\001\002\000\026\004\046\005\052\006\047\007\055" +
    "\010\060\017\053\022\050\036\051\037\054\065\056\001" +
    "\002\000\004\007\107\001\002\000\026\004\046\005\052" +
    "\006\047\007\055\010\060\017\053\022\050\036\051\037" +
    "\054\065\056\001\002\000\004\031\104\001\002\000\026" +
    "\004\046\005\052\006\047\007\055\010\060\017\053\022" +
    "\050\036\051\037\054\065\056\001\002\000\026\004\046" +
    "\005\052\006\047\007\055\010\060\017\053\022\050\036" +
    "\051\037\054\065\056\001\002\000\026\004\046\005\052" +
    "\006\047\007\055\010\060\017\053\022\050\036\051\037" +
    "\054\065\056\001\002\000\050\011\uffc6\020\uffc6\021\070" +
    "\022\064\024\067\025\076\026\065\027\074\031\uffc6\033" +
    "\077\051\uffc6\052\uffc6\054\066\055\072\056\061\057\071" +
    "\062\uffc6\063\062\064\063\001\002\000\050\011\uffce\020" +
    "\uffce\021\070\022\064\024\067\025\076\026\065\027\074" +
    "\031\uffce\033\uffce\051\uffce\052\uffce\054\uffce\055\uffce\056" +
    "\uffce\057\uffce\062\uffce\063\uffce\064\uffce\001\002\000\050" +
    "\011\uffd4\020\uffd4\021\uffd4\022\uffd4\024\uffd4\025\uffd4\026" +
    "\065\027\uffd4\031\uffd4\033\uffd4\051\uffd4\052\uffd4\054\uffd4" +
    "\055\uffd4\056\uffd4\057\uffd4\062\uffd4\063\uffd4\064\uffd4\001" +
    "\002\000\026\004\046\005\052\006\047\007\055\010\060" +
    "\017\053\022\050\036\051\037\054\065\056\001\002\000" +
    "\050\011\uffcf\020\uffcf\021\070\022\064\024\067\025\076" +
    "\026\065\027\074\031\uffcf\033\uffcf\051\uffcf\052\uffcf\054" +
    "\uffcf\055\uffcf\056\uffcf\057\uffcf\062\uffcf\063\uffcf\064\uffcf" +
    "\001\002\000\050\011\uffd2\020\uffd2\021\uffd2\022\uffd2\024" +
    "\uffd2\025\uffd2\026\065\027\uffd2\031\uffd2\033\uffd2\051\uffd2" +
    "\052\uffd2\054\uffd2\055\uffd2\056\uffd2\057\uffd2\062\uffd2\063" +
    "\uffd2\064\uffd2\001\002\000\004\031\116\001\002\000\004" +
    "\020\111\001\002\000\004\046\112\001\002\000\032\003" +
    "\031\007\021\012\016\034\030\035\037\040\017\042\011" +
    "\043\023\044\007\053\035\060\027\061\006\001\002\000" +
    "\034\003\031\007\021\012\016\034\030\035\037\040\017" +
    "\042\011\043\023\044\007\047\115\053\035\060\027\061" +
    "\006\001\002\000\036\002\uffff\003\uffff\007\uffff\012\uffff" +
    "\034\uffff\035\uffff\040\uffff\042\uffff\043\uffff\044\uffff\047" +
    "\uffff\053\uffff\060\uffff\061\uffff\001\002\000\036\002\uffe3" +
    "\003\uffe3\007\uffe3\012\uffe3\034\uffe3\035\uffe3\040\uffe3\042" +
    "\uffe3\043\uffe3\044\uffe3\047\uffe3\053\uffe3\060\uffe3\061\uffe3" +
    "\001\002\000\026\004\046\005\052\006\047\007\055\010" +
    "\060\017\053\022\050\036\051\037\054\065\056\001\002" +
    "\000\042\020\uffe2\021\070\022\064\024\067\025\076\026" +
    "\065\027\074\031\075\033\077\054\066\055\072\056\061" +
    "\057\071\062\100\063\062\064\063\001\002\000\050\011" +
    "\uffca\020\uffca\021\070\022\064\024\067\025\076\026\065" +
    "\027\074\031\uffca\033\uffca\051\uffca\052\uffca\054\uffca\055" +
    "\uffca\056\uffca\057\uffca\062\uffca\063\uffca\064\uffca\001\002" +
    "\000\050\011\uffcc\020\uffcc\021\070\022\064\024\067\025" +
    "\076\026\065\027\074\031\uffcc\033\uffcc\051\uffcc\052\uffcc" +
    "\054\uffcc\055\uffcc\056\uffcc\057\uffcc\062\uffcc\063\uffcc\064" +
    "\uffcc\001\002\000\050\011\uffd1\020\uffd1\021\uffd1\022\uffd1" +
    "\024\067\025\076\026\065\027\074\031\uffd1\033\uffd1\051" +
    "\uffd1\052\uffd1\054\uffd1\055\uffd1\056\uffd1\057\uffd1\062\uffd1" +
    "\063\uffd1\064\uffd1\001\002\000\050\011\uffd3\020\uffd3\021" +
    "\uffd3\022\uffd3\024\uffd3\025\uffd3\026\065\027\uffd3\031\uffd3" +
    "\033\uffd3\051\uffd3\052\uffd3\054\uffd3\055\uffd3\056\uffd3\057" +
    "\uffd3\062\uffd3\063\uffd3\064\uffd3\001\002\000\050\011\uffcb" +
    "\020\uffcb\021\070\022\064\024\067\025\076\026\065\027" +
    "\074\031\uffcb\033\uffcb\051\uffcb\052\uffcb\054\uffcb\055\uffcb" +
    "\056\uffcb\057\uffcb\062\uffcb\063\uffcb\064\uffcb\001\002\000" +
    "\046\011\uffd5\020\uffd5\021\uffd5\022\uffd5\024\uffd5\025\uffd5" +
    "\027\uffd5\031\uffd5\033\uffd5\051\uffd5\052\uffd5\054\uffd5\055" +
    "\uffd5\056\uffd5\057\uffd5\062\uffd5\063\uffd5\064\uffd5\001\002" +
    "\000\050\011\uffd0\020\uffd0\021\uffd0\022\uffd0\024\067\025" +
    "\076\026\065\027\074\031\uffd0\033\uffd0\051\uffd0\052\uffd0" +
    "\054\uffd0\055\uffd0\056\uffd0\057\uffd0\062\uffd0\063\uffd0\064" +
    "\uffd0\001\002\000\050\011\uffc8\020\uffc8\021\070\022\064" +
    "\024\067\025\076\026\065\027\074\031\uffc8\033\077\051" +
    "\uffc8\052\uffc8\054\066\055\072\056\061\057\071\062\uffc8" +
    "\063\uffc8\064\uffc8\001\002\000\050\011\uffc7\020\uffc7\021" +
    "\070\022\064\024\067\025\076\026\065\027\074\031\uffc7" +
    "\033\077\051\uffc7\052\uffc7\054\066\055\072\056\061\057" +
    "\071\062\uffc7\063\uffc7\064\063\001\002\000\050\011\uffcd" +
    "\020\uffcd\021\070\022\064\024\067\025\076\026\065\027" +
    "\074\031\uffcd\033\uffcd\051\uffcd\052\uffcd\054\uffcd\055\uffcd" +
    "\056\uffcd\057\uffcd\062\uffcd\063\uffcd\064\uffcd\001\002\000" +
    "\050\011\uffc9\020\uffc9\021\070\022\064\024\067\025\076" +
    "\026\065\027\074\031\uffc9\033\077\051\uffc9\052\uffc9\054" +
    "\066\055\072\056\061\057\071\062\uffc9\063\uffc9\064\uffc9" +
    "\001\002\000\026\004\046\005\052\006\047\007\055\010" +
    "\060\017\053\022\050\036\051\037\054\065\056\001\002" +
    "\000\042\021\070\022\064\024\067\025\076\026\065\027" +
    "\074\031\075\033\077\051\135\054\066\055\072\056\061" +
    "\057\071\062\100\063\062\064\063\001\002\000\050\011" +
    "\uffbe\020\uffbe\021\uffbe\022\uffbe\024\uffbe\025\uffbe\026\uffbe" +
    "\027\uffbe\031\uffbe\033\uffbe\051\uffbe\052\uffbe\054\uffbe\055" +
    "\uffbe\056\uffbe\057\uffbe\062\uffbe\063\uffbe\064\uffbe\001\002" +
    "\000\042\020\137\021\070\022\064\024\067\025\076\026" +
    "\065\027\074\031\075\033\077\054\066\055\072\056\061" +
    "\057\071\062\100\063\062\064\063\001\002\000\050\011" +
    "\uffbd\020\uffbd\021\uffbd\022\uffbd\024\uffbd\025\uffbd\026\uffbd" +
    "\027\uffbd\031\uffbd\033\uffbd\051\uffbd\052\uffbd\054\uffbd\055" +
    "\uffbd\056\uffbd\057\uffbd\062\uffbd\063\uffbd\064\uffbd\001\002" +
    "\000\050\011\uffd6\020\uffd6\021\uffd6\022\uffd6\024\uffd6\025" +
    "\uffd6\026\uffd6\027\uffd6\031\uffd6\033\uffd6\051\uffd6\052\uffd6" +
    "\054\uffd6\055\uffd6\056\uffd6\057\uffd6\062\uffd6\063\uffd6\064" +
    "\uffd6\001\002\000\026\004\046\005\052\006\047\007\055" +
    "\010\060\017\053\022\050\036\051\037\054\065\056\001" +
    "\002\000\042\011\143\021\070\022\064\024\067\025\076" +
    "\026\065\027\074\031\075\033\077\054\066\055\072\056" +
    "\061\057\071\062\100\063\062\064\063\001\002\000\060" +
    "\002\uffe6\003\uffe6\004\uffe6\005\uffe6\006\uffe6\007\uffe6\010" +
    "\uffe6\012\uffe6\017\uffe6\022\uffe6\034\uffe6\035\uffe6\036\uffe6" +
    "\037\uffe6\040\uffe6\042\uffe6\043\uffe6\044\uffe6\047\uffe6\053" +
    "\uffe6\060\uffe6\061\uffe6\065\uffe6\001\002\000\004\030\145" +
    "\001\002\000\014\013\153\014\146\015\147\016\152\041" +
    "\151\001\002\000\010\031\uffda\050\uffda\055\uffda\001\002" +
    "\000\010\031\uffd9\050\uffd9\055\uffd9\001\002\000\006\031" +
    "\155\050\154\001\002\000\010\031\uffd7\050\uffd7\055\uffd7" +
    "\001\002\000\010\031\uffd8\050\uffd8\055\uffd8\001\002\000" +
    "\010\031\uffdb\050\uffdb\055\uffdb\001\002\000\004\051\160" +
    "\001\002\000\026\004\046\005\052\006\047\007\055\010" +
    "\060\017\053\022\050\036\051\037\054\065\056\001\002" +
    "\000\042\011\157\021\070\022\064\024\067\025\076\026" +
    "\065\027\074\031\075\033\077\054\066\055\072\056\061" +
    "\057\071\062\100\063\062\064\063\001\002\000\036\002" +
    "\uffed\003\uffed\007\uffed\012\uffed\034\uffed\035\uffed\040\uffed" +
    "\042\uffed\043\uffed\044\uffed\047\uffed\053\uffed\060\uffed\061" +
    "\uffed\001\002\000\004\031\161\001\002\000\004\050\162" +
    "\001\002\000\026\004\046\005\052\006\047\007\055\010" +
    "\060\017\053\022\050\036\051\037\054\065\056\001\002" +
    "\000\006\051\166\052\165\001\002\000\044\021\070\022" +
    "\064\024\067\025\076\026\065\027\074\031\075\033\077" +
    "\051\uffe9\052\uffe9\054\066\055\072\056\061\057\071\062" +
    "\100\063\062\064\063\001\002\000\026\004\046\005\052" +
    "\006\047\007\055\010\060\017\053\022\050\036\051\037" +
    "\054\065\056\001\002\000\004\011\167\001\002\000\036" +
    "\002\uffec\003\uffec\007\uffec\012\uffec\034\uffec\035\uffec\040" +
    "\uffec\042\uffec\043\uffec\044\uffec\047\uffec\053\uffec\060\uffec" +
    "\061\uffec\001\002\000\044\021\070\022\064\024\067\025" +
    "\076\026\065\027\074\031\075\033\077\051\uffea\052\uffea" +
    "\054\066\055\072\056\061\057\071\062\100\063\062\064" +
    "\063\001\002\000\036\002\uffef\003\uffef\007\uffef\012\uffef" +
    "\034\uffef\035\uffef\040\uffef\042\uffef\043\uffef\044\uffef\047" +
    "\uffef\053\uffef\060\uffef\061\uffef\001\002\000\036\002\uffe1" +
    "\003\uffe1\007\uffe1\012\uffe1\034\uffe1\035\uffe1\040\uffe1\042" +
    "\uffe1\043\uffe1\044\uffe1\047\uffe1\053\uffe1\060\uffe1\061\uffe1" +
    "\001\002\000\032\003\031\007\021\012\016\034\030\035" +
    "\037\040\017\042\011\043\023\044\007\053\035\060\027" +
    "\061\006\001\002\000\034\003\031\007\021\012\016\034" +
    "\030\035\037\040\017\042\011\043\023\044\007\047\175" +
    "\053\035\060\027\061\006\001\002\000\004\042\176\001" +
    "\002\000\004\017\177\001\002\000\026\004\046\005\052" +
    "\006\047\007\055\010\060\017\053\022\050\036\051\037" +
    "\054\065\056\001\002\000\042\020\201\021\070\022\064" +
    "\024\067\025\076\026\065\027\074\031\075\033\077\054" +
    "\066\055\072\056\061\057\071\062\100\063\062\064\063" +
    "\001\002\000\004\011\202\001\002\000\036\002\uffde\003" +
    "\uffde\007\uffde\012\uffde\034\uffde\035\uffde\040\uffde\042\uffde" +
    "\043\uffde\044\uffde\047\uffde\053\uffde\060\uffde\061\uffde\001" +
    "\002\000\026\004\046\005\052\006\047\007\055\010\060" +
    "\017\053\022\050\036\051\037\054\065\056\001\002\000" +
    "\006\066\205\070\206\001\002\000\004\017\213\001\002" +
    "\000\004\017\207\001\002\000\026\004\046\005\052\006" +
    "\047\007\055\010\060\017\053\022\050\036\051\037\054" +
    "\065\056\001\002\000\042\020\211\021\070\022\064\024" +
    "\067\025\076\026\065\027\074\031\075\033\077\054\066" +
    "\055\072\056\061\057\071\062\100\063\062\064\063\001" +
    "\002\000\004\011\212\001\002\000\036\002\uffdc\003\uffdc" +
    "\007\uffdc\012\uffdc\034\uffdc\035\uffdc\040\uffdc\042\uffdc\043" +
    "\uffdc\044\uffdc\047\uffdc\053\uffdc\060\uffdc\061\uffdc\001\002" +
    "\000\026\004\046\005\052\006\047\007\055\010\060\017" +
    "\053\022\050\036\051\037\054\065\056\001\002\000\042" +
    "\020\215\021\070\022\064\024\067\025\076\026\065\027" +
    "\074\031\075\033\077\054\066\055\072\056\061\057\071" +
    "\062\100\063\062\064\063\001\002\000\004\011\216\001" +
    "\002\000\036\002\uffdd\003\uffdd\007\uffdd\012\uffdd\034\uffdd" +
    "\035\uffdd\040\uffdd\042\uffdd\043\uffdd\044\uffdd\047\uffdd\053" +
    "\uffdd\060\uffdd\061\uffdd\001\002\000\042\021\070\022\064" +
    "\024\067\025\076\026\065\027\074\031\075\033\077\051" +
    "\220\054\066\055\072\056\061\057\071\062\100\063\062" +
    "\064\063\001\002\000\004\031\221\001\002\000\026\004" +
    "\046\005\052\006\047\007\055\010\060\017\053\022\050" +
    "\036\051\037\054\065\056\001\002\000\042\011\223\021" +
    "\070\022\064\024\067\025\076\026\065\027\074\031\075" +
    "\033\077\054\066\055\072\056\061\057\071\062\100\063" +
    "\062\064\063\001\002\000\036\002\uffe5\003\uffe5\007\uffe5" +
    "\012\uffe5\034\uffe5\035\uffe5\040\uffe5\042\uffe5\043\uffe5\044" +
    "\uffe5\047\uffe5\053\uffe5\060\uffe5\061\uffe5\001\002\000\026" +
    "\004\046\005\052\006\047\007\055\010\060\017\053\022" +
    "\050\036\051\037\054\065\056\001\002\000\042\020\226" +
    "\021\070\022\064\024\067\025\076\026\065\027\074\031" +
    "\075\033\077\054\066\055\072\056\061\057\071\062\100" +
    "\063\062\064\063\001\002\000\004\046\227\001\002\000" +
    "\032\003\031\007\021\012\016\034\030\035\037\040\017" +
    "\042\011\043\023\044\007\053\035\060\027\061\006\001" +
    "\002\000\034\003\031\007\021\012\016\034\030\035\037" +
    "\040\017\042\011\043\023\044\007\047\231\053\035\060" +
    "\027\061\006\001\002\000\036\002\uffe4\003\uffe4\007\uffe4" +
    "\012\uffe4\034\uffe4\035\uffe4\040\uffe4\042\uffe4\043\uffe4\044" +
    "\uffe4\047\uffe4\053\uffe4\060\uffe4\061\uffe4\001\002\000\026" +
    "\004\046\005\052\006\047\007\055\010\060\017\053\022" +
    "\050\036\051\037\054\065\056\001\002\000\042\020\234" +
    "\021\070\022\064\024\067\025\076\026\065\027\074\031" +
    "\075\033\077\054\066\055\072\056\061\057\071\062\100" +
    "\063\062\064\063\001\002\000\004\011\235\001\002\000" +
    "\036\002\uffee\003\uffee\007\uffee\012\uffee\034\uffee\035\uffee" +
    "\040\uffee\042\uffee\043\uffee\044\uffee\047\uffee\053\uffee\060" +
    "\uffee\061\uffee\001\002\000\026\004\046\005\052\006\047" +
    "\007\055\010\060\017\053\022\050\036\051\037\054\065" +
    "\056\001\002\000\042\020\240\021\070\022\064\024\067" +
    "\025\076\026\065\027\074\031\075\033\077\054\066\055" +
    "\072\056\061\057\071\062\100\063\062\064\063\001\002" +
    "\000\004\046\241\001\002\000\032\003\031\007\021\012" +
    "\016\034\030\035\037\040\017\042\011\043\023\044\007" +
    "\053\035\060\027\061\006\001\002\000\034\003\031\007" +
    "\021\012\016\034\030\035\037\040\017\042\011\043\023" +
    "\044\007\047\243\053\035\060\027\061\006\001\002\000" +
    "\036\002\uffdf\003\uffdf\007\uffdf\012\uffdf\034\uffdf\035\uffdf" +
    "\040\uffdf\042\uffdf\043\uffdf\044\uffdf\047\uffdf\053\uffdf\060" +
    "\uffdf\061\uffdf\001\002\000\014\013\153\014\146\015\147" +
    "\016\152\041\151\001\002\000\004\055\246\001\002\000" +
    "\004\007\247\001\002\000\004\031\250\001\002\000\004" +
    "\045\251\001\002\000\004\044\252\001\002\000\004\017" +
    "\253\001\002\000\004\020\254\001\002\000\004\011\255" +
    "\001\002\000\036\002\uffeb\003\uffeb\007\uffeb\012\uffeb\034" +
    "\uffeb\035\uffeb\040\uffeb\042\uffeb\043\uffeb\044\uffeb\047\uffeb" +
    "\053\uffeb\060\uffeb\061\uffeb\001\002\000\036\002\uffe0\003" +
    "\uffe0\007\uffe0\012\uffe0\034\uffe0\035\uffe0\040\uffe0\042\uffe0" +
    "\043\uffe0\044\uffe0\047\uffe0\053\uffe0\060\uffe0\061\uffe0\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\254\000\046\002\037\003\013\004\004\005\033\006" +
    "\012\007\024\010\025\011\035\012\021\013\014\014\011" +
    "\015\003\016\032\020\007\021\023\022\040\023\017\026" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\004\113" +
    "\005\033\006\012\007\024\010\025\011\035\012\021\013" +
    "\014\014\011\015\003\016\032\020\007\021\023\022\040" +
    "\023\017\026\031\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\044\001\001\000\002\001\001" +
    "\000\004\025\056\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\025\137\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\025\135\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\025\131\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\130\001\001\000\004\025" +
    "\127\001\001\000\004\025\126\001\001\000\004\025\125" +
    "\001\001\000\004\025\124\001\001\000\004\025\123\001" +
    "\001\000\004\025\122\001\001\000\004\025\121\001\001" +
    "\000\004\025\120\001\001\000\004\025\117\001\001\000" +
    "\004\017\107\001\001\000\004\025\105\001\001\000\002" +
    "\001\001\000\004\025\102\001\001\000\004\025\101\001" +
    "\001\000\004\025\100\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\025\104\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\003\112\004\004\005" +
    "\033\006\012\007\024\010\025\011\035\012\021\013\014" +
    "\014\011\015\003\016\032\020\007\021\023\022\040\023" +
    "\017\026\031\001\001\000\042\004\113\005\033\006\012" +
    "\007\024\010\025\011\035\012\021\013\014\014\011\015" +
    "\003\016\032\020\007\021\023\022\040\023\017\026\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\025" +
    "\116\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\025\133\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\025\141\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\024\147\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\025\155\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\025\163\027" +
    "\162\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\025\167\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\003\173\004\004\005\033\006\012\007\024\010\025\011" +
    "\035\012\021\013\014\014\011\015\003\016\032\020\007" +
    "\021\023\022\040\023\017\026\031\001\001\000\042\004" +
    "\113\005\033\006\012\007\024\010\025\011\035\012\021" +
    "\013\014\014\011\015\003\016\032\020\007\021\023\022" +
    "\040\023\017\026\031\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\025\177\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\216\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\025\207\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\213\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\221\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\025\224\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\003\227\004\004\005" +
    "\033\006\012\007\024\010\025\011\035\012\021\013\014" +
    "\014\011\015\003\016\032\020\007\021\023\022\040\023" +
    "\017\026\031\001\001\000\042\004\113\005\033\006\012" +
    "\007\024\010\025\011\035\012\021\013\014\014\011\015" +
    "\003\016\032\020\007\021\023\022\040\023\017\026\031" +
    "\001\001\000\002\001\001\000\004\025\232\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\025\236\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\003\241\004\004\005\033\006\012\007\024\010\025" +
    "\011\035\012\021\013\014\014\011\015\003\016\032\020" +
    "\007\021\023\022\040\023\017\026\031\001\001\000\042" +
    "\004\113\005\033\006\012\007\024\010\025\011\035\012" +
    "\021\013\014\014\011\015\003\016\032\020\007\021\023" +
    "\022\040\023\017\026\031\001\001\000\002\001\001\000" +
    "\004\024\244\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    scanner s;
    parser(scanner s){this.s = s;}

    public LinkedList<Errores> listaErrores = new LinkedList<>();
    
    public void syntax_error(Symbol s){
        listaErrores.add(new Errores("SINTACTICO RECUPERABLE", "No se esperaba el componente " + s.value, s.left, s.right));
    }

    public void unrecovered_syntax_error (Symbol s){
        listaErrores.add(new Errores("SINTACTICO NO RECUPERABLE", "No se esperaba el componente " + s.value, s.left, s.right));
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> start_val = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INSTRUCCIONES 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a; RESULT.add(b);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new LinkedList<>(); RESULT.add(a);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= IMPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= DECLARACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= ASIGNACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= DECLARACION_VEC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= ASIGNACION_VEC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= DECLARACION_LIST 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= SIF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= CFOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= BREAKK 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= CONTINUEE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCION ::= SDO_WHILE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCION ::= SWHILE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCCION ::= APPENDD 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INSTRUCCION ::= REMOVEE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INSTRUCCION ::= error FINCADENA 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // IMPRESION ::= IMPRIMIR PAR1 EXPRESION PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  RESULT = new Print(a, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION ::= MUTABILIDAD ID DOSPUNTOS TIPOS IGUAL EXPRESION FINCADENA 
            {
              Instruccion RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new Declaracion(m, b, c, a, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION_VEC ::= MUTABILIDAD ID DOSPUNTOS TIPOS CORCHETE1 CORCHETE2 IGUAL CORCHETE1 LISTA_VALORES CORCHETE2 FINCADENA 
            {
              Instruccion RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int valoresleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valoresright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> valores = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new DeclaracionVec(m, b, valores, 1, a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VEC",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION_LIST ::= LIST MENOR TIPOS MAYOR ID IGUAL NEW LIST PAR1 PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		 RESULT = new DeclaracionList(b, a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_LIST",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // LISTA_VALORES ::= LISTA_VALORES COMA EXPRESION 
            {
              LinkedList<Instruccion> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> lista = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion exp = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 lista.add(exp); RESULT = lista; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_VALORES",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // LISTA_VALORES ::= EXPRESION 
            {
              LinkedList<Instruccion> RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion exp = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(exp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_VALORES",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // MUTABILIDAD ::= CONST 
            {
              String RESULT =null;
		  RESULT = "CONST";  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MUTABILIDAD",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // MUTABILIDAD ::= VAR 
            {
              String RESULT =null;
		  RESULT = "VAR";  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MUTABILIDAD",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ASIGNACION ::= ID IGUAL EXPRESION FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT=new AsignacionVar(a, b, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ASIGNACION_VEC ::= ID CORCHETE1 EXPRESION CORCHETE2 IGUAL EXPRESION FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT=new AsignacionVec(a, b, c, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_VEC",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SIF ::= IF PAR1 EXPRESION PAR2 LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new If(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CFOR ::= FOR PAR1 ASIGNACION EXPRESION FINCADENA ACTUALIZA_FOR PAR2 LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new For(a, b, c, d, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CFOR",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ACTUALIZA_FOR ::= ID IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=new AsignacionVar(a, b, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZA_FOR",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // BREAKK ::= BREAK FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		    RESULT = new Break(aleft, aright);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BREAKK",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CONTINUEE ::= CONTINUE FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		    RESULT = new Continue(aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTINUEE",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SWHILE ::= WHILE PAR1 EXPRESION PAR2 LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new While(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SWHILE",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SDO_WHILE ::= DO LLAVE1 INSTRUCCIONES LLAVE2 WHILE PAR1 EXPRESION PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new DoWhile(b, a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SDO_WHILE",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // APPENDD ::= ID PUNTO APPEND PAR1 EXPRESION PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new Append(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("APPENDD",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // REMOVEE ::= ID PUNTO REMOVE PAR1 EXPRESION PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new Remove(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("REMOVEE",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TIPOS ::= INT 
            {
              Tipo RESULT =null;
		  RESULT = new Tipo(tipoDato.ENTERO);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TIPOS ::= DOUBLE 
            {
              Tipo RESULT =null;
		  RESULT = new Tipo(tipoDato.DECIMAL);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TIPOS ::= STRING 
            {
              Tipo RESULT =null;
		  RESULT = new Tipo(tipoDato.CADENA);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TIPOS ::= CHAR 
            {
              Tipo RESULT =null;
		  RESULT = new Tipo(tipoDato.CARACTER);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TIPOS ::= BOOL 
            {
              Tipo RESULT =null;
		  RESULT = new Tipo(tipoDato.BOOLEANO);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPRESION ::= MENOS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Aritmeticas(a, OperadoresAritmeticos.NEGACION, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXPRESION ::= EXPRESION POTENCIA EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.POTENCIA, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXPRESION ::= EXPRESION DIVISION EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.DIVISION, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXPRESION ::= EXPRESION MULTIPLICACION EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.MULTIPLICACION, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXPRESION ::= EXPRESION MODULO EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.MODULO, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXPRESION ::= EXPRESION MAS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.SUMA, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXPRESION ::= EXPRESION MENOS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.RESTA, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXPRESION ::= EXPRESION IGUAL IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Relacionales(a, b, OperadoresRelacionales.EQUALS, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXPRESION ::= EXPRESION DIFERENTE EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Relacionales(a, b, OperadoresRelacionales.DIFERENTE, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPRESION ::= EXPRESION MENORIGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Relacionales(a, b, OperadoresRelacionales.MENORIGUAL, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXPRESION ::= EXPRESION MAYORIGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Relacionales(a, b, OperadoresRelacionales.MAYORIGUAL, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXPRESION ::= EXPRESION MENOR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Relacionales(a, b, OperadoresRelacionales.MENOR, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXPRESION ::= EXPRESION MAYOR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Relacionales(a, b, OperadoresRelacionales.MAYOR, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXPRESION ::= NOT EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Logicos(a, OperadoresLogicos.NOT, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXPRESION ::= EXPRESION XOR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Logicos(a, b, OperadoresLogicos.XOR, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXPRESION ::= EXPRESION AND EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Logicos(a, b, OperadoresLogicos.AND, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXPRESION ::= EXPRESION OR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Logicos(a, b, OperadoresLogicos.OR, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXPRESION ::= ENTERO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Nativo(Integer.parseInt(a), new Tipo(tipoDato.ENTERO), aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXPRESION ::= DECIMAL 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Nativo(new Double(a), new Tipo(tipoDato.DECIMAL), aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXPRESION ::= CADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Nativo(a, new Tipo(tipoDato.CADENA), aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXPRESION ::= CARACTER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Nativo(a, new Tipo(tipoDato.CARACTER), aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXPRESION ::= TRUE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(true, new Tipo(tipoDato.BOOLEANO), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXPRESION ::= FALSE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(false, new Tipo(tipoDato.BOOLEANO), aleft, aright );    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXPRESION ::= ID 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new AccesoVar(a, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXPRESION ::= ID CORCHETE1 EXPRESION CORCHETE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new AccesoVec(a, b, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXPRESION ::= PAR1 EXPRESION PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = a;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
