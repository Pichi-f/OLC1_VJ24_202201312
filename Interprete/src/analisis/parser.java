
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analisis;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import abstracto.Instruccion;
import simbolo.Tipo;
import simbolo.tipoDato;
import excepciones.Errores;
import instrucciones.Print;
import instrucciones.Declaracion;
import instrucciones.AsignacionVar;
import instrucciones.If;
import instrucciones.For;
import instrucciones.Break;
import instrucciones.Continue;
import instrucciones.While;
import instrucciones.DoWhile;
import instrucciones.DeclaracionVec;
import instrucciones.AsignacionVec;
import instrucciones.DeclaracionList;
import expresiones.Nativo;
import expresiones.Aritmeticas;
import expresiones.OperadoresAritmeticos;
import expresiones.Relacionales;
import expresiones.OperadoresRelacionales;
import expresiones.AccesoVar;
import expresiones.Logicos;
import expresiones.OperadoresLogicos;
import expresiones.AccesoVec;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\101\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\004\000\002\005\007\000\002\006\011" +
    "\000\002\010\015\000\002\012\015\000\002\025\005\000" +
    "\002\025\003\000\002\024\003\000\002\024\003\000\002" +
    "\007\006\000\002\011\011\000\002\013\011\000\002\016" +
    "\014\000\002\017\005\000\002\020\004\000\002\021\004" +
    "\000\002\014\011\000\002\015\013\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\023\004\000\002\023\005\000\002\023" +
    "\005\000\002\023\005\000\002\023\005\000\002\023\005" +
    "\000\002\023\005\000\002\023\006\000\002\023\005\000" +
    "\002\023\005\000\002\023\005\000\002\023\005\000\002" +
    "\023\005\000\002\023\004\000\002\023\005\000\002\023" +
    "\005\000\002\023\005\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\006\000\002" +
    "\023\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\237\000\032\003\030\007\020\012\016\034\027\035" +
    "\036\040\017\042\010\043\022\044\007\053\034\060\026" +
    "\061\006\001\002\000\036\002\ufff3\003\ufff3\007\ufff3\012" +
    "\ufff3\034\ufff3\035\ufff3\040\ufff3\042\ufff3\043\ufff3\044\ufff3" +
    "\047\ufff3\053\ufff3\060\ufff3\061\ufff3\001\002\000\036\002" +
    "\ufffe\003\ufffe\007\ufffe\012\ufffe\034\ufffe\035\ufffe\040\ufffe" +
    "\042\ufffe\043\ufffe\044\ufffe\047\ufffe\053\ufffe\060\ufffe\061" +
    "\ufffe\001\002\000\004\011\241\001\002\000\004\054\227" +
    "\001\002\000\004\017\221\001\002\000\036\002\ufff5\003" +
    "\ufff5\007\ufff5\012\ufff5\034\ufff5\035\ufff5\040\ufff5\042\ufff5" +
    "\043\ufff5\044\ufff5\047\ufff5\053\ufff5\060\ufff5\061\ufff5\001" +
    "\002\000\036\002\ufff2\003\ufff2\007\ufff2\012\ufff2\034\ufff2" +
    "\035\ufff2\040\ufff2\042\ufff2\043\ufff2\044\ufff2\047\ufff2\053" +
    "\ufff2\060\ufff2\061\ufff2\001\002\000\036\002\ufffc\003\ufffc" +
    "\007\ufffc\012\ufffc\034\ufffc\035\ufffc\040\ufffc\042\ufffc\043" +
    "\ufffc\044\ufffc\047\ufffc\053\ufffc\060\ufffc\061\ufffc\001\002" +
    "\000\034\002\000\003\030\007\020\012\016\034\027\035" +
    "\036\040\017\042\010\043\022\044\007\053\034\060\026" +
    "\061\006\001\002\000\036\002\ufff7\003\ufff7\007\ufff7\012" +
    "\ufff7\034\ufff7\035\ufff7\040\ufff7\042\ufff7\043\ufff7\044\ufff7" +
    "\047\ufff7\053\ufff7\060\ufff7\061\ufff7\001\002\000\004\017" +
    "\215\001\002\000\004\017\207\001\002\000\006\031\137" +
    "\050\201\001\002\000\036\002\ufff8\003\ufff8\007\ufff8\012" +
    "\ufff8\034\ufff8\035\ufff8\040\ufff8\042\ufff8\043\ufff8\044\ufff8" +
    "\047\ufff8\053\ufff8\060\ufff8\061\ufff8\001\002\000\004\046" +
    "\171\001\002\000\036\002\ufff4\003\ufff4\007\ufff4\012\ufff4" +
    "\034\ufff4\035\ufff4\040\ufff4\042\ufff4\043\ufff4\044\ufff4\047" +
    "\ufff4\053\ufff4\060\ufff4\061\ufff4\001\002\000\036\002\ufffb" +
    "\003\ufffb\007\ufffb\012\ufffb\034\ufffb\035\ufffb\040\ufffb\042" +
    "\ufffb\043\ufffb\044\ufffb\047\ufffb\053\ufffb\060\ufffb\061\ufffb" +
    "\001\002\000\036\002\ufffa\003\ufffa\007\ufffa\012\ufffa\034" +
    "\ufffa\035\ufffa\040\ufffa\042\ufffa\043\ufffa\044\ufffa\047\ufffa" +
    "\053\ufffa\060\ufffa\061\ufffa\001\002\000\004\011\170\001" +
    "\002\000\004\007\uffea\001\002\000\004\011\167\001\002" +
    "\000\004\007\142\001\002\000\036\002\ufff6\003\ufff6\007" +
    "\ufff6\012\ufff6\034\ufff6\035\ufff6\040\ufff6\042\ufff6\043\ufff6" +
    "\044\ufff6\047\ufff6\053\ufff6\060\ufff6\061\ufff6\001\002\000" +
    "\036\002\ufffd\003\ufffd\007\ufffd\012\ufffd\034\ufffd\035\ufffd" +
    "\040\ufffd\042\ufffd\043\ufffd\044\ufffd\047\ufffd\053\ufffd\060" +
    "\ufffd\061\ufffd\001\002\000\004\017\041\001\002\000\036" +
    "\002\ufff9\003\ufff9\007\ufff9\012\ufff9\034\ufff9\035\ufff9\040" +
    "\ufff9\042\ufff9\043\ufff9\044\ufff9\047\ufff9\053\ufff9\060\ufff9" +
    "\061\ufff9\001\002\000\004\007\uffe9\001\002\000\004\002" +
    "\040\001\002\000\004\002\001\001\002\000\004\007\042" +
    "\001\002\000\004\031\137\001\002\000\026\004\044\005" +
    "\047\006\045\007\053\010\056\017\051\022\046\036\050" +
    "\037\052\065\054\001\002\000\050\011\uffc7\020\uffc7\021" +
    "\uffc7\022\uffc7\024\uffc7\025\uffc7\026\uffc7\027\uffc7\031\uffc7" +
    "\033\uffc7\051\uffc7\052\uffc7\054\uffc7\055\uffc7\056\uffc7\057" +
    "\uffc7\062\uffc7\063\uffc7\064\uffc7\001\002\000\050\011\uffc8" +
    "\020\uffc8\021\uffc8\022\uffc8\024\uffc8\025\uffc8\026\uffc8\027" +
    "\uffc8\031\uffc8\033\uffc8\051\uffc8\052\uffc8\054\uffc8\055\uffc8" +
    "\056\uffc8\057\uffc8\062\uffc8\063\uffc8\064\uffc8\001\002\000" +
    "\026\004\044\005\047\006\045\007\053\010\056\017\051" +
    "\022\046\036\050\037\052\065\054\001\002\000\050\011" +
    "\uffc9\020\uffc9\021\uffc9\022\uffc9\024\uffc9\025\uffc9\026\uffc9" +
    "\027\uffc9\031\uffc9\033\uffc9\051\uffc9\052\uffc9\054\uffc9\055" +
    "\uffc9\056\uffc9\057\uffc9\062\uffc9\063\uffc9\064\uffc9\001\002" +
    "\000\050\011\uffc5\020\uffc5\021\uffc5\022\uffc5\024\uffc5\025" +
    "\uffc5\026\uffc5\027\uffc5\031\uffc5\033\uffc5\051\uffc5\052\uffc5" +
    "\054\uffc5\055\uffc5\056\uffc5\057\uffc5\062\uffc5\063\uffc5\064" +
    "\uffc5\001\002\000\026\004\044\005\047\006\045\007\053" +
    "\010\056\017\051\022\046\036\050\037\052\065\054\001" +
    "\002\000\050\011\uffc4\020\uffc4\021\uffc4\022\uffc4\024\uffc4" +
    "\025\uffc4\026\uffc4\027\uffc4\031\uffc4\033\uffc4\051\uffc4\052" +
    "\uffc4\054\uffc4\055\uffc4\056\uffc4\057\uffc4\062\uffc4\063\uffc4" +
    "\064\uffc4\001\002\000\052\011\uffc3\020\uffc3\021\uffc3\022" +
    "\uffc3\024\uffc3\025\uffc3\026\uffc3\027\uffc3\031\uffc3\033\uffc3" +
    "\050\131\051\uffc3\052\uffc3\054\uffc3\055\uffc3\056\uffc3\057" +
    "\uffc3\062\uffc3\063\uffc3\064\uffc3\001\002\000\026\004\044" +
    "\005\047\006\045\007\053\010\056\017\051\022\046\036" +
    "\050\037\052\065\054\001\002\000\042\011\071\021\067" +
    "\022\062\024\065\025\074\026\063\027\072\031\073\033" +
    "\075\054\064\055\070\056\060\057\066\062\076\063\057" +
    "\064\061\001\002\000\050\011\uffc6\020\uffc6\021\uffc6\022" +
    "\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6\031\uffc6\033\uffc6" +
    "\051\uffc6\052\uffc6\054\uffc6\055\uffc6\056\uffc6\057\uffc6\062" +
    "\uffc6\063\uffc6\064\uffc6\001\002\000\026\004\044\005\047" +
    "\006\045\007\053\010\056\017\051\022\046\036\050\037" +
    "\052\065\054\001\002\000\026\004\044\005\047\006\045" +
    "\007\053\010\056\017\051\022\046\036\050\037\052\065" +
    "\054\001\002\000\026\004\044\005\047\006\045\007\053" +
    "\010\056\017\051\022\046\036\050\037\052\065\054\001" +
    "\002\000\026\004\044\005\047\006\045\007\053\010\056" +
    "\017\051\022\046\036\050\037\052\065\054\001\002\000" +
    "\026\004\044\005\047\006\045\007\053\010\056\017\051" +
    "\022\046\036\050\037\052\065\054\001\002\000\026\004" +
    "\044\005\047\006\045\007\053\010\056\017\051\022\046" +
    "\036\050\037\052\065\054\001\002\000\026\004\044\005" +
    "\047\006\045\007\053\010\056\017\051\022\046\036\050" +
    "\037\052\065\054\001\002\000\026\004\044\005\047\006" +
    "\045\007\053\010\056\017\051\022\046\036\050\037\052" +
    "\065\054\001\002\000\026\004\044\005\047\006\045\007" +
    "\053\010\056\017\051\022\046\036\050\037\052\065\054" +
    "\001\002\000\026\004\044\005\047\006\045\007\053\010" +
    "\056\017\051\022\046\036\050\037\052\065\054\001\002" +
    "\000\004\007\105\001\002\000\026\004\044\005\047\006" +
    "\045\007\053\010\056\017\051\022\046\036\050\037\052" +
    "\065\054\001\002\000\004\031\102\001\002\000\026\004" +
    "\044\005\047\006\045\007\053\010\056\017\051\022\046" +
    "\036\050\037\052\065\054\001\002\000\026\004\044\005" +
    "\047\006\045\007\053\010\056\017\051\022\046\036\050" +
    "\037\052\065\054\001\002\000\026\004\044\005\047\006" +
    "\045\007\053\010\056\017\051\022\046\036\050\037\052" +
    "\065\054\001\002\000\050\011\uffca\020\uffca\021\067\022" +
    "\062\024\065\025\074\026\063\027\072\031\uffca\033\075" +
    "\051\uffca\052\uffca\054\064\055\070\056\060\057\066\062" +
    "\uffca\063\057\064\061\001\002\000\050\011\uffd2\020\uffd2" +
    "\021\067\022\062\024\065\025\074\026\063\027\072\031" +
    "\uffd2\033\uffd2\051\uffd2\052\uffd2\054\uffd2\055\uffd2\056\uffd2" +
    "\057\uffd2\062\uffd2\063\uffd2\064\uffd2\001\002\000\050\011" +
    "\uffd8\020\uffd8\021\uffd8\022\uffd8\024\uffd8\025\uffd8\026\063" +
    "\027\uffd8\031\uffd8\033\uffd8\051\uffd8\052\uffd8\054\uffd8\055" +
    "\uffd8\056\uffd8\057\uffd8\062\uffd8\063\uffd8\064\uffd8\001\002" +
    "\000\026\004\044\005\047\006\045\007\053\010\056\017" +
    "\051\022\046\036\050\037\052\065\054\001\002\000\050" +
    "\011\uffd3\020\uffd3\021\067\022\062\024\065\025\074\026" +
    "\063\027\072\031\uffd3\033\uffd3\051\uffd3\052\uffd3\054\uffd3" +
    "\055\uffd3\056\uffd3\057\uffd3\062\uffd3\063\uffd3\064\uffd3\001" +
    "\002\000\050\011\uffd6\020\uffd6\021\uffd6\022\uffd6\024\uffd6" +
    "\025\uffd6\026\063\027\uffd6\031\uffd6\033\uffd6\051\uffd6\052" +
    "\uffd6\054\uffd6\055\uffd6\056\uffd6\057\uffd6\062\uffd6\063\uffd6" +
    "\064\uffd6\001\002\000\004\031\114\001\002\000\004\020" +
    "\107\001\002\000\004\046\110\001\002\000\032\003\030" +
    "\007\020\012\016\034\027\035\036\040\017\042\010\043" +
    "\022\044\007\053\034\060\026\061\006\001\002\000\034" +
    "\003\030\007\020\012\016\034\027\035\036\040\017\042" +
    "\010\043\022\044\007\047\113\053\034\060\026\061\006" +
    "\001\002\000\036\002\uffff\003\uffff\007\uffff\012\uffff\034" +
    "\uffff\035\uffff\040\uffff\042\uffff\043\uffff\044\uffff\047\uffff" +
    "\053\uffff\060\uffff\061\uffff\001\002\000\036\002\uffe5\003" +
    "\uffe5\007\uffe5\012\uffe5\034\uffe5\035\uffe5\040\uffe5\042\uffe5" +
    "\043\uffe5\044\uffe5\047\uffe5\053\uffe5\060\uffe5\061\uffe5\001" +
    "\002\000\026\004\044\005\047\006\045\007\053\010\056" +
    "\017\051\022\046\036\050\037\052\065\054\001\002\000" +
    "\042\020\uffe4\021\067\022\062\024\065\025\074\026\063" +
    "\027\072\031\073\033\075\054\064\055\070\056\060\057" +
    "\066\062\076\063\057\064\061\001\002\000\050\011\uffce" +
    "\020\uffce\021\067\022\062\024\065\025\074\026\063\027" +
    "\072\031\uffce\033\uffce\051\uffce\052\uffce\054\uffce\055\uffce" +
    "\056\uffce\057\uffce\062\uffce\063\uffce\064\uffce\001\002\000" +
    "\050\011\uffd5\020\uffd5\021\uffd5\022\uffd5\024\065\025\074" +
    "\026\063\027\072\031\uffd5\033\uffd5\051\uffd5\052\uffd5\054" +
    "\uffd5\055\uffd5\056\uffd5\057\uffd5\062\uffd5\063\uffd5\064\uffd5" +
    "\001\002\000\050\011\uffd0\020\uffd0\021\067\022\062\024" +
    "\065\025\074\026\063\027\072\031\uffd0\033\uffd0\051\uffd0" +
    "\052\uffd0\054\uffd0\055\uffd0\056\uffd0\057\uffd0\062\uffd0\063" +
    "\uffd0\064\uffd0\001\002\000\050\011\uffd7\020\uffd7\021\uffd7" +
    "\022\uffd7\024\uffd7\025\uffd7\026\063\027\uffd7\031\uffd7\033" +
    "\uffd7\051\uffd7\052\uffd7\054\uffd7\055\uffd7\056\uffd7\057\uffd7" +
    "\062\uffd7\063\uffd7\064\uffd7\001\002\000\050\011\uffcf\020" +
    "\uffcf\021\067\022\062\024\065\025\074\026\063\027\072" +
    "\031\uffcf\033\uffcf\051\uffcf\052\uffcf\054\uffcf\055\uffcf\056" +
    "\uffcf\057\uffcf\062\uffcf\063\uffcf\064\uffcf\001\002\000\046" +
    "\011\uffd9\020\uffd9\021\uffd9\022\uffd9\024\uffd9\025\uffd9\027" +
    "\uffd9\031\uffd9\033\uffd9\051\uffd9\052\uffd9\054\uffd9\055\uffd9" +
    "\056\uffd9\057\uffd9\062\uffd9\063\uffd9\064\uffd9\001\002\000" +
    "\050\011\uffd4\020\uffd4\021\uffd4\022\uffd4\024\065\025\074" +
    "\026\063\027\072\031\uffd4\033\uffd4\051\uffd4\052\uffd4\054" +
    "\uffd4\055\uffd4\056\uffd4\057\uffd4\062\uffd4\063\uffd4\064\uffd4" +
    "\001\002\000\050\011\uffcc\020\uffcc\021\067\022\062\024" +
    "\065\025\074\026\063\027\072\031\uffcc\033\075\051\uffcc" +
    "\052\uffcc\054\064\055\070\056\060\057\066\062\uffcc\063" +
    "\uffcc\064\uffcc\001\002\000\050\011\uffd1\020\uffd1\021\067" +
    "\022\062\024\065\025\074\026\063\027\072\031\uffd1\033" +
    "\uffd1\051\uffd1\052\uffd1\054\uffd1\055\uffd1\056\uffd1\057\uffd1" +
    "\062\uffd1\063\uffd1\064\uffd1\001\002\000\050\011\uffcb\020" +
    "\uffcb\021\067\022\062\024\065\025\074\026\063\027\072" +
    "\031\uffcb\033\075\051\uffcb\052\uffcb\054\064\055\070\056" +
    "\060\057\066\062\uffcb\063\uffcb\064\061\001\002\000\050" +
    "\011\uffcd\020\uffcd\021\067\022\062\024\065\025\074\026" +
    "\063\027\072\031\uffcd\033\075\051\uffcd\052\uffcd\054\064" +
    "\055\070\056\060\057\066\062\uffcd\063\uffcd\064\uffcd\001" +
    "\002\000\026\004\044\005\047\006\045\007\053\010\056" +
    "\017\051\022\046\036\050\037\052\065\054\001\002\000" +
    "\042\021\067\022\062\024\065\025\074\026\063\027\072" +
    "\031\073\033\075\051\133\054\064\055\070\056\060\057" +
    "\066\062\076\063\057\064\061\001\002\000\050\011\uffc2" +
    "\020\uffc2\021\uffc2\022\uffc2\024\uffc2\025\uffc2\026\uffc2\027" +
    "\uffc2\031\uffc2\033\uffc2\051\uffc2\052\uffc2\054\uffc2\055\uffc2" +
    "\056\uffc2\057\uffc2\062\uffc2\063\uffc2\064\uffc2\001\002\000" +
    "\042\020\135\021\067\022\062\024\065\025\074\026\063" +
    "\027\072\031\073\033\075\054\064\055\070\056\060\057" +
    "\066\062\076\063\057\064\061\001\002\000\050\011\uffc1" +
    "\020\uffc1\021\uffc1\022\uffc1\024\uffc1\025\uffc1\026\uffc1\027" +
    "\uffc1\031\uffc1\033\uffc1\051\uffc1\052\uffc1\054\uffc1\055\uffc1" +
    "\056\uffc1\057\uffc1\062\uffc1\063\uffc1\064\uffc1\001\002\000" +
    "\050\011\uffda\020\uffda\021\uffda\022\uffda\024\uffda\025\uffda" +
    "\026\uffda\027\uffda\031\uffda\033\uffda\051\uffda\052\uffda\054" +
    "\uffda\055\uffda\056\uffda\057\uffda\062\uffda\063\uffda\064\uffda" +
    "\001\002\000\026\004\044\005\047\006\045\007\053\010" +
    "\056\017\051\022\046\036\050\037\052\065\054\001\002" +
    "\000\042\011\141\021\067\022\062\024\065\025\074\026" +
    "\063\027\072\031\073\033\075\054\064\055\070\056\060" +
    "\057\066\062\076\063\057\064\061\001\002\000\060\002" +
    "\uffe8\003\uffe8\004\uffe8\005\uffe8\006\uffe8\007\uffe8\010\uffe8" +
    "\012\uffe8\017\uffe8\022\uffe8\034\uffe8\035\uffe8\036\uffe8\037" +
    "\uffe8\040\uffe8\042\uffe8\043\uffe8\044\uffe8\047\uffe8\053\uffe8" +
    "\060\uffe8\061\uffe8\065\uffe8\001\002\000\004\030\143\001" +
    "\002\000\014\013\151\014\145\015\144\016\150\041\147" +
    "\001\002\000\010\031\uffdd\050\uffdd\055\uffdd\001\002\000" +
    "\010\031\uffde\050\uffde\055\uffde\001\002\000\006\031\153" +
    "\050\152\001\002\000\010\031\uffdb\050\uffdb\055\uffdb\001" +
    "\002\000\010\031\uffdc\050\uffdc\055\uffdc\001\002\000\010" +
    "\031\uffdf\050\uffdf\055\uffdf\001\002\000\004\051\156\001" +
    "\002\000\026\004\044\005\047\006\045\007\053\010\056" +
    "\017\051\022\046\036\050\037\052\065\054\001\002\000" +
    "\042\011\155\021\067\022\062\024\065\025\074\026\063" +
    "\027\072\031\073\033\075\054\064\055\070\056\060\057" +
    "\066\062\076\063\057\064\061\001\002\000\036\002\uffef" +
    "\003\uffef\007\uffef\012\uffef\034\uffef\035\uffef\040\uffef\042" +
    "\uffef\043\uffef\044\uffef\047\uffef\053\uffef\060\uffef\061\uffef" +
    "\001\002\000\004\031\157\001\002\000\004\050\160\001" +
    "\002\000\026\004\044\005\047\006\045\007\053\010\056" +
    "\017\051\022\046\036\050\037\052\065\054\001\002\000" +
    "\006\051\164\052\163\001\002\000\044\021\067\022\062" +
    "\024\065\025\074\026\063\027\072\031\073\033\075\051" +
    "\uffeb\052\uffeb\054\064\055\070\056\060\057\066\062\076" +
    "\063\057\064\061\001\002\000\026\004\044\005\047\006" +
    "\045\007\053\010\056\017\051\022\046\036\050\037\052" +
    "\065\054\001\002\000\004\011\165\001\002\000\036\002" +
    "\uffee\003\uffee\007\uffee\012\uffee\034\uffee\035\uffee\040\uffee" +
    "\042\uffee\043\uffee\044\uffee\047\uffee\053\uffee\060\uffee\061" +
    "\uffee\001\002\000\044\021\067\022\062\024\065\025\074" +
    "\026\063\027\072\031\073\033\075\051\uffec\052\uffec\054" +
    "\064\055\070\056\060\057\066\062\076\063\057\064\061" +
    "\001\002\000\036\002\ufff1\003\ufff1\007\ufff1\012\ufff1\034" +
    "\ufff1\035\ufff1\040\ufff1\042\ufff1\043\ufff1\044\ufff1\047\ufff1" +
    "\053\ufff1\060\ufff1\061\ufff1\001\002\000\036\002\uffe3\003" +
    "\uffe3\007\uffe3\012\uffe3\034\uffe3\035\uffe3\040\uffe3\042\uffe3" +
    "\043\uffe3\044\uffe3\047\uffe3\053\uffe3\060\uffe3\061\uffe3\001" +
    "\002\000\032\003\030\007\020\012\016\034\027\035\036" +
    "\040\017\042\010\043\022\044\007\053\034\060\026\061" +
    "\006\001\002\000\034\003\030\007\020\012\016\034\027" +
    "\035\036\040\017\042\010\043\022\044\007\047\173\053" +
    "\034\060\026\061\006\001\002\000\004\042\174\001\002" +
    "\000\004\017\175\001\002\000\026\004\044\005\047\006" +
    "\045\007\053\010\056\017\051\022\046\036\050\037\052" +
    "\065\054\001\002\000\042\020\177\021\067\022\062\024" +
    "\065\025\074\026\063\027\072\031\073\033\075\054\064" +
    "\055\070\056\060\057\066\062\076\063\057\064\061\001" +
    "\002\000\004\011\200\001\002\000\036\002\uffe0\003\uffe0" +
    "\007\uffe0\012\uffe0\034\uffe0\035\uffe0\040\uffe0\042\uffe0\043" +
    "\uffe0\044\uffe0\047\uffe0\053\uffe0\060\uffe0\061\uffe0\001\002" +
    "\000\026\004\044\005\047\006\045\007\053\010\056\017" +
    "\051\022\046\036\050\037\052\065\054\001\002\000\042" +
    "\021\067\022\062\024\065\025\074\026\063\027\072\031" +
    "\073\033\075\051\203\054\064\055\070\056\060\057\066" +
    "\062\076\063\057\064\061\001\002\000\004\031\204\001" +
    "\002\000\026\004\044\005\047\006\045\007\053\010\056" +
    "\017\051\022\046\036\050\037\052\065\054\001\002\000" +
    "\042\011\206\021\067\022\062\024\065\025\074\026\063" +
    "\027\072\031\073\033\075\054\064\055\070\056\060\057" +
    "\066\062\076\063\057\064\061\001\002\000\036\002\uffe7" +
    "\003\uffe7\007\uffe7\012\uffe7\034\uffe7\035\uffe7\040\uffe7\042" +
    "\uffe7\043\uffe7\044\uffe7\047\uffe7\053\uffe7\060\uffe7\061\uffe7" +
    "\001\002\000\026\004\044\005\047\006\045\007\053\010" +
    "\056\017\051\022\046\036\050\037\052\065\054\001\002" +
    "\000\042\020\211\021\067\022\062\024\065\025\074\026" +
    "\063\027\072\031\073\033\075\054\064\055\070\056\060" +
    "\057\066\062\076\063\057\064\061\001\002\000\004\046" +
    "\212\001\002\000\032\003\030\007\020\012\016\034\027" +
    "\035\036\040\017\042\010\043\022\044\007\053\034\060" +
    "\026\061\006\001\002\000\034\003\030\007\020\012\016" +
    "\034\027\035\036\040\017\042\010\043\022\044\007\047" +
    "\214\053\034\060\026\061\006\001\002\000\036\002\uffe6" +
    "\003\uffe6\007\uffe6\012\uffe6\034\uffe6\035\uffe6\040\uffe6\042" +
    "\uffe6\043\uffe6\044\uffe6\047\uffe6\053\uffe6\060\uffe6\061\uffe6" +
    "\001\002\000\026\004\044\005\047\006\045\007\053\010" +
    "\056\017\051\022\046\036\050\037\052\065\054\001\002" +
    "\000\042\020\217\021\067\022\062\024\065\025\074\026" +
    "\063\027\072\031\073\033\075\054\064\055\070\056\060" +
    "\057\066\062\076\063\057\064\061\001\002\000\004\011" +
    "\220\001\002\000\036\002\ufff0\003\ufff0\007\ufff0\012\ufff0" +
    "\034\ufff0\035\ufff0\040\ufff0\042\ufff0\043\ufff0\044\ufff0\047" +
    "\ufff0\053\ufff0\060\ufff0\061\ufff0\001\002\000\026\004\044" +
    "\005\047\006\045\007\053\010\056\017\051\022\046\036" +
    "\050\037\052\065\054\001\002\000\042\020\223\021\067" +
    "\022\062\024\065\025\074\026\063\027\072\031\073\033" +
    "\075\054\064\055\070\056\060\057\066\062\076\063\057" +
    "\064\061\001\002\000\004\046\224\001\002\000\032\003" +
    "\030\007\020\012\016\034\027\035\036\040\017\042\010" +
    "\043\022\044\007\053\034\060\026\061\006\001\002\000" +
    "\034\003\030\007\020\012\016\034\027\035\036\040\017" +
    "\042\010\043\022\044\007\047\226\053\034\060\026\061" +
    "\006\001\002\000\036\002\uffe1\003\uffe1\007\uffe1\012\uffe1" +
    "\034\uffe1\035\uffe1\040\uffe1\042\uffe1\043\uffe1\044\uffe1\047" +
    "\uffe1\053\uffe1\060\uffe1\061\uffe1\001\002\000\014\013\151" +
    "\014\145\015\144\016\150\041\147\001\002\000\004\055" +
    "\231\001\002\000\004\007\232\001\002\000\004\031\233" +
    "\001\002\000\004\045\234\001\002\000\004\044\235\001" +
    "\002\000\004\017\236\001\002\000\004\020\237\001\002" +
    "\000\004\011\240\001\002\000\036\002\uffed\003\uffed\007" +
    "\uffed\012\uffed\034\uffed\035\uffed\040\uffed\042\uffed\043\uffed" +
    "\044\uffed\047\uffed\053\uffed\060\uffed\061\uffed\001\002\000" +
    "\036\002\uffe2\003\uffe2\007\uffe2\012\uffe2\034\uffe2\035\uffe2" +
    "\040\uffe2\042\uffe2\043\uffe2\044\uffe2\047\uffe2\053\uffe2\060" +
    "\uffe2\061\uffe2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\237\000\042\002\036\003\013\004\004\005\032\006" +
    "\012\007\023\010\024\011\034\012\020\013\014\014\011" +
    "\015\003\016\031\020\010\021\022\024\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\004\111\005\032\006\012" +
    "\007\023\010\024\011\034\012\020\013\014\014\011\015" +
    "\003\016\031\020\010\021\022\024\030\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\042\001\001\000\002\001\001\000\004\023" +
    "\054\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\023\135\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\133\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\127\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\126\001\001\000\004\023\125\001\001" +
    "\000\004\023\124\001\001\000\004\023\123\001\001\000" +
    "\004\023\122\001\001\000\004\023\121\001\001\000\004" +
    "\023\120\001\001\000\004\023\117\001\001\000\004\023" +
    "\116\001\001\000\004\023\115\001\001\000\004\017\105" +
    "\001\001\000\004\023\103\001\001\000\002\001\001\000" +
    "\004\023\100\001\001\000\004\023\077\001\001\000\004" +
    "\023\076\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\102\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\003\110\004\004\005\032\006\012" +
    "\007\023\010\024\011\034\012\020\013\014\014\011\015" +
    "\003\016\031\020\010\021\022\024\030\001\001\000\036" +
    "\004\111\005\032\006\012\007\023\010\024\011\034\012" +
    "\020\013\014\014\011\015\003\016\031\020\010\021\022" +
    "\024\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\114\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\131\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\137\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\022\145\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\153\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\023" +
    "\161\025\160\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\165\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\003\171\004\004\005\032\006\012\007\023\010" +
    "\024\011\034\012\020\013\014\014\011\015\003\016\031" +
    "\020\010\021\022\024\030\001\001\000\036\004\111\005" +
    "\032\006\012\007\023\010\024\011\034\012\020\013\014" +
    "\014\011\015\003\016\031\020\010\021\022\024\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\175" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\201\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\204\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\207\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\003\212\004\004\005\032\006" +
    "\012\007\023\010\024\011\034\012\020\013\014\014\011" +
    "\015\003\016\031\020\010\021\022\024\030\001\001\000" +
    "\036\004\111\005\032\006\012\007\023\010\024\011\034" +
    "\012\020\013\014\014\011\015\003\016\031\020\010\021" +
    "\022\024\030\001\001\000\002\001\001\000\004\023\215" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\221\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\003\224\004\004\005\032\006\012\007" +
    "\023\010\024\011\034\012\020\013\014\014\011\015\003" +
    "\016\031\020\010\021\022\024\030\001\001\000\036\004" +
    "\111\005\032\006\012\007\023\010\024\011\034\012\020" +
    "\013\014\014\011\015\003\016\031\020\010\021\022\024" +
    "\030\001\001\000\002\001\001\000\004\022\227\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    scanner s;
    parser(scanner s){this.s = s;}

    public LinkedList<Errores> listaErrores = new LinkedList<>();
    
    public void syntax_error(Symbol s){
        listaErrores.add(new Errores("SINTACTICO RECUPERABLE", "No se esperaba el componente " + s.value, s.left, s.right));
    }

    public void unrecovered_syntax_error (Symbol s){
        listaErrores.add(new Errores("SINTACTICO NO RECUPERABLE", "No se esperaba el componente " + s.value, s.left, s.right));
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> start_val = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INSTRUCCIONES 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a; RESULT.add(b);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new LinkedList<>(); RESULT.add(a);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= IMPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= DECLARACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= ASIGNACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= DECLARACION_VEC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= ASIGNACION_VEC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= DECLARACION_LIST 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= SIF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= CFOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= BREAKK 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= CONTINUEE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCION ::= SDO_WHILE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCION ::= SWHILE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCCION ::= error FINCADENA 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // IMPRESION ::= IMPRIMIR PAR1 EXPRESION PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  RESULT = new Print(a, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACION ::= MUTABILIDAD ID DOSPUNTOS TIPOS IGUAL EXPRESION FINCADENA 
            {
              Instruccion RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new Declaracion(m, b, c, a, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACION_VEC ::= MUTABILIDAD ID DOSPUNTOS TIPOS CORCHETE1 CORCHETE2 IGUAL CORCHETE1 LISTA_VALORES CORCHETE2 FINCADENA 
            {
              Instruccion RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int valoresleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valoresright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> valores = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new DeclaracionVec(m, b, valores, 1, a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VEC",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION_LIST ::= LIST MENOR TIPOS MAYOR ID IGUAL NEW LIST PAR1 PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		 RESULT = new DeclaracionList(b, a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_LIST",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LISTA_VALORES ::= LISTA_VALORES COMA EXPRESION 
            {
              LinkedList<Instruccion> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> lista = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion exp = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 lista.add(exp); RESULT = lista; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_VALORES",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LISTA_VALORES ::= EXPRESION 
            {
              LinkedList<Instruccion> RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion exp = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(exp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_VALORES",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // MUTABILIDAD ::= CONST 
            {
              String RESULT =null;
		  RESULT = "CONST";  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MUTABILIDAD",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // MUTABILIDAD ::= VAR 
            {
              String RESULT =null;
		  RESULT = "VAR";  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MUTABILIDAD",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ASIGNACION ::= ID IGUAL EXPRESION FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT=new AsignacionVar(a, b, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ASIGNACION_VEC ::= ID CORCHETE1 EXPRESION CORCHETE2 IGUAL EXPRESION FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT=new AsignacionVec(a, b, c, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_VEC",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SIF ::= IF PAR1 EXPRESION PAR2 LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new If(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CFOR ::= FOR PAR1 ASIGNACION EXPRESION FINCADENA ACTUALIZA_FOR PAR2 LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new For(a, b, c, d, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CFOR",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ACTUALIZA_FOR ::= ID IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=new AsignacionVar(a, b, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZA_FOR",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // BREAKK ::= BREAK FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		    RESULT = new Break(aleft, aright);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BREAKK",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CONTINUEE ::= CONTINUE FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		    RESULT = new Continue(aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTINUEE",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SWHILE ::= WHILE PAR1 EXPRESION PAR2 LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new While(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SWHILE",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SDO_WHILE ::= DO LLAVE1 INSTRUCCIONES LLAVE2 WHILE PAR1 EXPRESION PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new DoWhile(b, a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SDO_WHILE",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TIPOS ::= INT 
            {
              Tipo RESULT =null;
		  RESULT = new Tipo(tipoDato.ENTERO);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TIPOS ::= DOUBLE 
            {
              Tipo RESULT =null;
		  RESULT = new Tipo(tipoDato.DECIMAL);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TIPOS ::= STRING 
            {
              Tipo RESULT =null;
		  RESULT = new Tipo(tipoDato.CADENA);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // TIPOS ::= CHAR 
            {
              Tipo RESULT =null;
		  RESULT = new Tipo(tipoDato.CARACTER);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TIPOS ::= BOOL 
            {
              Tipo RESULT =null;
		  RESULT = new Tipo(tipoDato.BOOLEANO);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXPRESION ::= MENOS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Aritmeticas(a, OperadoresAritmeticos.NEGACION, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXPRESION ::= EXPRESION POTENCIA EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.POTENCIA, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXPRESION ::= EXPRESION DIVISION EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.DIVISION, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXPRESION ::= EXPRESION MULTIPLICACION EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.MULTIPLICACION, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPRESION ::= EXPRESION MODULO EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.MODULO, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXPRESION ::= EXPRESION MAS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.SUMA, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXPRESION ::= EXPRESION MENOS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.RESTA, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXPRESION ::= EXPRESION IGUAL IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Relacionales(a, b, OperadoresRelacionales.EQUALS, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXPRESION ::= EXPRESION DIFERENTE EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Relacionales(a, b, OperadoresRelacionales.DIFERENTE, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXPRESION ::= EXPRESION MENORIGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Relacionales(a, b, OperadoresRelacionales.MENORIGUAL, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXPRESION ::= EXPRESION MAYORIGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Relacionales(a, b, OperadoresRelacionales.MAYORIGUAL, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXPRESION ::= EXPRESION MENOR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Relacionales(a, b, OperadoresRelacionales.MENOR, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXPRESION ::= EXPRESION MAYOR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Relacionales(a, b, OperadoresRelacionales.MAYOR, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPRESION ::= NOT EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Logicos(a, OperadoresLogicos.NOT, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXPRESION ::= EXPRESION XOR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Logicos(a, b, OperadoresLogicos.XOR, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXPRESION ::= EXPRESION AND EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Logicos(a, b, OperadoresLogicos.AND, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXPRESION ::= EXPRESION OR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Logicos(a, b, OperadoresLogicos.OR, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXPRESION ::= ENTERO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Nativo(Integer.parseInt(a), new Tipo(tipoDato.ENTERO), aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXPRESION ::= DECIMAL 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Nativo(new Double(a), new Tipo(tipoDato.DECIMAL), aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXPRESION ::= CADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Nativo(a, new Tipo(tipoDato.CADENA), aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXPRESION ::= CARACTER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Nativo(a, new Tipo(tipoDato.CARACTER), aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXPRESION ::= TRUE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(true, new Tipo(tipoDato.BOOLEANO), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXPRESION ::= FALSE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(false, new Tipo(tipoDato.BOOLEANO), aleft, aright );    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXPRESION ::= ID 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new AccesoVar(a, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXPRESION ::= ID CORCHETE1 EXPRESION CORCHETE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new AccesoVec(a, b, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXPRESION ::= PAR1 EXPRESION PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = a;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
