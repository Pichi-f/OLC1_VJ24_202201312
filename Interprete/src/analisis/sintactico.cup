package analisis;

// Importaciones
import java_cup.runtime.Symbol;
import java.util.LinkedList;
import abstracto.Instruccion;
import simbolo.Tipo;
import simbolo.tipoDato;
import excepciones.Errores;


// Instrucciones
import instrucciones.Print;
import instrucciones.Declaracion;
import instrucciones.AsignacionVar;

// Expresiones
import expresiones.Nativo;
import expresiones.Aritmeticas;
import expresiones.OperadoresAritmeticos;
import expresiones.Relacionales;
import expresiones.OperadoresRelacionales;
import expresiones.AccesoVar;

// Parser
parser code
{:
    scanner s;
    parser(scanner s){this.s = s;}

    public LinkedList<Errores> listaErrores = new LinkedList<>();
    
    public void syntax_error(Symbol s){
        listaErrores.add(new Errores("SINTACTICO RECUPERABLE", "No se esperaba el componente " + s.value, s.left, s.right));
    }

    public void unrecovered_syntax_error (Symbol s){
        listaErrores.add(new Errores("SINTACTICO NO RECUPERABLE", "No se esperaba el componente " + s.value, s.left, s.right));
    }

:}

action code
{:
:}

// Terminales
terminal String CADENA, ENTERO, DECIMAL, ID, CARACTER;
terminal String FINCADENA, IMPRIMIR, INT, DOUBLE, STRING;
terminal String PAR1, PAR2, MAS, MENOS, UMENOS, DOSPUNTOS;
terminal String IGUAL, EQUALS; 
terminal String CONST, VAR;

// No terminales
nonterminal LinkedList<Instruccion> INICIO, INSTRUCCIONES;
nonterminal Instruccion INSTRUCCION;
nonterminal Instruccion IMPRESION, DECLARACION, ASIGNACION;
nonterminal Tipo TIPOS;
nonterminal Instruccion EXPRESION;
nonterminal String MUTABILIDAD;

precedence left EQUALS;
precedence left MAS;
precedence left MENOS;
precedence left UMENOS;

start with INICIO;

INICIO ::= INSTRUCCIONES:a    {:  RESULT = a;  :}
;

INSTRUCCIONES ::= INSTRUCCIONES:a INSTRUCCION:b     {:  RESULT = a; RESULT.add(b);  :}
                | INSTRUCCION:a                     {:  RESULT = new LinkedList<>(); RESULT.add(a);  :}
;

INSTRUCCION ::= IMPRESION:a         {:  RESULT = a;  :}
                | DECLARACION:a     {:  RESULT = a;  :}
                | ASIGNACION:a      {:  RESULT = a;  :}
                | error FINCADENA  
;

IMPRESION ::= IMPRIMIR PAR1 EXPRESION:a PAR2 FINCADENA      {:  RESULT = new Print(a, aleft, aright);  :}
;

DECLARACION ::= MUTABILIDAD:m ID:b DOSPUNTOS TIPOS:a IGUAL EXPRESION:c FINCADENA    {:  RESULT = new Declaracion(m, b, c, a, aleft, aright);  :}
;

MUTABILIDAD ::= CONST     {:  RESULT = "CONST";  :}
                | VAR      {:  RESULT = "VAR";  :}
;

ASIGNACION ::= ID:a IGUAL EXPRESION:b FINCADENA  {:   RESULT=new AsignacionVar(a, b, aleft, aright);  :}
;

TIPOS ::= INT     {:  RESULT = new Tipo(tipoDato.ENTERO);  :}
        | DOUBLE  {:  RESULT = new Tipo(tipoDato.DECIMAL);  :}
        | STRING  {:  RESULT = new Tipo(tipoDato.CADENA);  :}
;

EXPRESION ::= MENOS EXPRESION:a                 {:  RESULT = new Aritmeticas(a, OperadoresAritmeticos.NEGACION, aleft, aright);  :} %prec UMENOS
            | PAR1 EXPRESION:a PAR2             {:  RESULT = a;  :}
            | EXPRESION:a MAS EXPRESION:b       {:  RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.SUMA, aleft, aright);  :}
            | EXPRESION:a MENOS EXPRESION:b     {:  RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.RESTA, aleft, aright);  :}
            | EXPRESION:a IGUAL IGUAL EXPRESION:b     {:  RESULT = new Relacionales(a, b, OperadoresRelacionales.EQUALS, aleft, aright);  :}%prec EQUALS
            | ENTERO:a      {:  RESULT = new Nativo(Integer.parseInt(a), new Tipo(tipoDato.ENTERO), aleft, aright);  :} 
            | DECIMAL:a     {:  RESULT = new Nativo(new Double(a), new Tipo(tipoDato.DECIMAL), aleft, aright);  :}
            | CADENA:a      {:  RESULT = new Nativo(a, new Tipo(tipoDato.CADENA), aleft, aright);  :}
            | CARACTER:a    {:  System.out.println("->"+a); RESULT = new Nativo(a, new Tipo(tipoDato.CARACTER), aleft, aright);  :}
            | ID:a          {:  RESULT = new AccesoVar(a, aleft, aright);  :}
;