package analisis;

// Importaciones
import java_cup.runtime.Symbol;
import java.util.LinkedList;
import abstracto.Instruccion;
import simbolo.Tipo;
import simbolo.tipoDato;
import excepciones.Errores;
import java.util.HashMap;


// Instrucciones
import instrucciones.Print;
import instrucciones.Declaracion;
import instrucciones.AsignacionVar;
import instrucciones.If;
import instrucciones.For;
import instrucciones.Break;
import instrucciones.Continue;
import instrucciones.While;
import instrucciones.DoWhile;
import instrucciones.DeclaracionVec;
import instrucciones.AsignacionVec;
import instrucciones.DeclaracionList;
import instrucciones.Append;
import instrucciones.Remove;
import instrucciones.Metodo;
import instrucciones.StartWith;
import instrucciones.Llamada;
import instrucciones.Return;
import instrucciones.Length;

// Expresiones
import expresiones.Nativo;
import expresiones.Aritmeticas;
import expresiones.OperadoresAritmeticos;
import expresiones.Relacionales;
import expresiones.OperadoresRelacionales;
import expresiones.AccesoVar;
import expresiones.Logicos;
import expresiones.OperadoresLogicos;
import expresiones.AccesoVec;

// Parser
parser code
{:
    scanner s;
    parser(scanner s){this.s = s;}

    public LinkedList<Errores> listaErrores = new LinkedList<>();
    
    public void syntax_error(Symbol s){
        listaErrores.add(new Errores("SINTACTICO RECUPERABLE", "No se esperaba el componente " + s.value, s.left, s.right));
    }

    public void unrecovered_syntax_error (Symbol s){
        listaErrores.add(new Errores("SINTACTICO NO RECUPERABLE", "No se esperaba el componente " + s.value, s.left, s.right));
    }

:}

action code
{:
:}

// Terminales
terminal String CADENA, ENTERO, DECIMAL, ID, CARACTER;
terminal FINCADENA, IMPRIMIR, INT, DOUBLE, STRING, CHAR;
terminal PAR1, PAR2, MAS, MENOS, UMENOS, MULTIPLICACION, DIVISION, POTENCIA, MODULO, DOSPUNTOS;
terminal IGUAL, EQUALS, DIFERENTE; 
terminal String CONST, VAR;
terminal TRUE, FALSE, IF, BOOL, WHILE, DO;
terminal LIST, NEW;
terminal LLAVE1, LLAVE2, CORCHETE1, CORCHETE2, COMA;
terminal FOR, MENOR, MAYOR, MENORIGUAL, MAYORIGUAL;
terminal String BREAK, CONTINUE, RETURN;
terminal OR, AND, XOR ,NOT;
terminal APPEND, PUNTO, REMOVE;
terminal VOID, STARTWITH;
terminal LENGHT;

// No terminales
nonterminal LinkedList<Instruccion> INICIO, INSTRUCCIONES;
nonterminal Instruccion INSTRUCCION;
nonterminal Instruccion IMPRESION, DECLARACION, ASIGNACION, DECLARACION_VEC, ASIGNACION_VEC;
nonterminal Instruccion DECLARACION_LIST;
nonterminal Instruccion SIF;
nonterminal Instruccion SWHILE;
nonterminal Instruccion SDO_WHILE;
nonterminal Instruccion CFOR, ACTUALIZA_FOR;
nonterminal Instruccion BREAKK;
nonterminal Instruccion CONTINUEE;
nonterminal Instruccion RETURNN;
nonterminal Instruccion APPENDD, REMOVEE;
nonterminal Instruccion LENGHTT;
nonterminal Tipo TIPOS;
nonterminal Instruccion EXPRESION;
nonterminal String MUTABILIDAD;
nonterminal LinkedList<Instruccion> LISTA_VALORES;
nonterminal Instruccion METODO;
nonterminal LinkedList<HashMap> PARAMS;
nonterminal Instruccion STARTWITHH;
nonterminal LinkedList<Instruccion> PARAMSCALL;
nonterminal Instruccion LLAMADA;


precedence left OR;
precedence left AND;
precedence left XOR;
precedence right NOT;
precedence left EQUALS, MENOR, MAYOR, DIFERENTE, MENORIGUAL, MAYORIGUAL;
precedence left MAS, MENOS;
precedence left MULTIPLICACION, DIVISION, MODULO;
precedence nonassoc POTENCIA;
precedence left UMENOS;

start with INICIO;

INICIO ::= INSTRUCCIONES:a    {:  RESULT = a;  :}
;

INSTRUCCIONES ::= INSTRUCCIONES:a INSTRUCCION:b     {:  RESULT = a; RESULT.add(b);  :}
                | INSTRUCCION:a                     {:  RESULT = new LinkedList<>(); RESULT.add(a);  :}
;

INSTRUCCION ::= IMPRESION:a         {:  RESULT = a;  :}
                | DECLARACION:a     {:  RESULT = a;  :}
                | ASIGNACION:a      {:  RESULT = a;  :}
                | DECLARACION_VEC:a {:  RESULT = a;  :}
                | ASIGNACION_VEC:a  {:  RESULT = a;  :}
                | DECLARACION_LIST:a{:  RESULT = a;  :}
                | SIF:a             {:   RESULT=a;   :}
                | CFOR:a            {:   RESULT=a;   :}
                | BREAKK:a          {:   RESULT=a;   :}
                | CONTINUEE:a       {:   RESULT=a;   :}
                | RETURNN:a         {:   RESULT=a;   :}
                | SDO_WHILE:a       {:   RESULT=a;   :}
                | SWHILE:a          {:   RESULT=a;   :}
                | METODO:a          {:   RESULT=a;   :}
                | STARTWITHH:a      {:   RESULT=a;   :}
                | LLAMADA:a FINCADENA        {:   RESULT=a;   :}
                | APPENDD:a         {:   RESULT=a;   :}
                | REMOVEE:a         {:   RESULT=a;   :}
                | LENGHTT:a         {:   RESULT=a;   :}
                | error FINCADENA  
;

IMPRESION ::= IMPRIMIR PAR1 EXPRESION:a PAR2 FINCADENA      {:  RESULT = new Print(a, aleft, aright);  :}
;

DECLARACION ::= MUTABILIDAD:m ID:b DOSPUNTOS TIPOS:a IGUAL EXPRESION:c FINCADENA    {:  RESULT = new Declaracion(m, b, c, a, aleft, aright);  :}
;

DECLARACION_VEC ::= MUTABILIDAD:m ID:b DOSPUNTOS TIPOS:a CORCHETE1 CORCHETE2 IGUAL CORCHETE1 LISTA_VALORES:valores CORCHETE2 FINCADENA
                    {: RESULT = new DeclaracionVec(m, b, valores, 1, a, aleft, aright); :}
;

DECLARACION_LIST ::= LIST MENOR TIPOS:a MAYOR ID:b IGUAL NEW LIST PAR1 PAR2 FINCADENA       {: RESULT = new DeclaracionList(b, a, aleft, aright); :}
;

LISTA_VALORES ::= LISTA_VALORES:lista COMA EXPRESION:exp {: lista.add(exp); RESULT = lista; :}
                | EXPRESION:exp                         {: RESULT = new LinkedList<>(); RESULT.add(exp); :}
;

MUTABILIDAD ::= CONST     {:  RESULT = "CONST";  :}
                | VAR      {:  RESULT = "VAR";  :}
;

ASIGNACION ::= ID:a IGUAL EXPRESION:b FINCADENA  {:   RESULT=new AsignacionVar(a, b, aleft, aright);  :}
;

ASIGNACION_VEC ::= ID:a CORCHETE1 EXPRESION:b CORCHETE2 IGUAL EXPRESION:c FINCADENA  {:   RESULT=new AsignacionVec(a, b, c, aleft, aright);  :}
;

METODO ::= TIPOS:a ID:b PAR1 PARAMS:p PAR2 LLAVE1 INSTRUCCIONES:c LLAVE2    {:   RESULT= new Metodo(b, p, c, a, aleft, aright );   :}
        |  TIPOS:a ID:b PAR1 PAR2 LLAVE1 INSTRUCCIONES:c LLAVE2             {:   RESULT= new Metodo(b, new LinkedList<HashMap>(), c, a, aleft, aright );   :}
;

PARAMS ::= PARAMS:a COMA TIPOS:b ID:c   {:  
                                            RESULT = a;
                                            var hm2= new HashMap<String, Object>();
                                            hm2.put("id", c);
                                            hm2.put("tipo", b);
                                            RESULT.add(hm2);
                                        :}
        | TIPOS:a ID:b                  {:  RESULT = new LinkedList<HashMap>(); 
                                            var hm = new HashMap<String, Object>();
                                            hm.put("id",b);
                                            hm.put("tipo", a);
                                            RESULT.add(hm);
                                        :}
;

STARTWITHH ::= STARTWITH ID:a PAR1 PARAMSCALL:b PAR2 FINCADENA  {:   RESULT = new StartWith(a, b, aleft, aright);   :}
            | STARTWITH ID:a PAR1 PAR2 FINCADENA  {:   RESULT = new StartWith(a, new LinkedList<Instruccion>(), aleft, aright);   :}
;

LLAMADA ::= ID:a PAR1 PARAMSCALL:b PAR2              {:  RESULT= new Llamada(a, b, aleft, aright);    :}
          | ID:a PAR1 PAR2                            {:  RESULT= new Llamada(a, new LinkedList<Instruccion>(), aleft, aright);    :}    
;

PARAMSCALL ::= PARAMSCALL:a COMA EXPRESION:e    {:  RESULT = a;
                                                    RESULT.add(e);
                                                :}
            | EXPRESION:a                       {:  RESULT = new LinkedList<Instruccion>(); 
                                                    RESULT.add(a);
                                                :}
;

SIF ::= IF PAR1 EXPRESION:a PAR2 LLAVE1 INSTRUCCIONES:b LLAVE2  {:   RESULT = new If(a, b, aleft, aright);   :}
;

CFOR ::= FOR PAR1 ASIGNACION:a EXPRESION:b FINCADENA ACTUALIZA_FOR:c PAR2 LLAVE1 INSTRUCCIONES:d LLAVE2     {:   RESULT = new For(a, b, c, d, aleft, aright);   :}
;

ACTUALIZA_FOR ::= ID:a IGUAL EXPRESION:b {:   RESULT=new AsignacionVar(a, b, aleft, aright);  :}
;

BREAKK ::= BREAK:a FINCADENA      {:    RESULT = new Break(aleft, aright);     :}
;

CONTINUEE ::= CONTINUE:a FINCADENA  {:    RESULT = new Continue(aleft, aright);  :}
;

RETURNN ::= RETURN EXPRESION:a FINCADENA  {:    RESULT = new Return(a, aleft, aright);  :}
            | RETURN:a FINCADENA  {:    RESULT = new Return(null, aleft, aright);  :}
;

SWHILE ::= WHILE PAR1 EXPRESION:a PAR2 LLAVE1 INSTRUCCIONES:b LLAVE2     {:   RESULT = new While(a, b, aleft, aright);   :}
;

SDO_WHILE ::= DO LLAVE1 INSTRUCCIONES:a LLAVE2 WHILE PAR1 EXPRESION:b PAR2 FINCADENA     {:   RESULT = new DoWhile(b, a, aleft, aright);   :}
;

APPENDD ::= ID:a PUNTO APPEND PAR1 EXPRESION:b PAR2 FINCADENA  {:   RESULT = new Append(a, b, aleft, aright);   :}
;

REMOVEE ::= ID:a PUNTO REMOVE PAR1 EXPRESION:b PAR2 FINCADENA  {:   RESULT = new Remove(a, b, aleft, aright);   :}
;

LENGHTT ::= LENGHT PAR1 EXPRESION:a PAR2  {:   RESULT = new Length(a, aleft, aright);   :}
;

TIPOS ::= INT     {:  RESULT = new Tipo(tipoDato.ENTERO);  :}
        | DOUBLE  {:  RESULT = new Tipo(tipoDato.DECIMAL);  :}
        | STRING  {:  RESULT = new Tipo(tipoDato.CADENA);  :}
        | CHAR    {:  RESULT = new Tipo(tipoDato.CARACTER);  :}
        | BOOL    {:  RESULT = new Tipo(tipoDato.BOOLEANO);  :}
        | VOID    {:  RESULT = new Tipo(tipoDato.VOID);  :}
;

EXPRESION ::= MENOS EXPRESION:a                 {:  RESULT = new Aritmeticas(a, OperadoresAritmeticos.NEGACION, aleft, aright);  :} %prec UMENOS
            | EXPRESION:a POTENCIA EXPRESION:b  {:  RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.POTENCIA, aleft, aright);  :}
            | EXPRESION:a DIVISION EXPRESION:b  {:  RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.DIVISION, aleft, aright);  :}
            | EXPRESION:a MULTIPLICACION EXPRESION:b  {:  RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.MULTIPLICACION, aleft, aright);  :}
            | EXPRESION:a MODULO EXPRESION:b    {:  RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.MODULO, aleft, aright);  :}%prec MODULO
            | EXPRESION:a MAS EXPRESION:b       {:  RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.SUMA, aleft, aright);  :}
            | EXPRESION:a MENOS EXPRESION:b     {:  RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.RESTA, aleft, aright);  :}
            | EXPRESION:a IGUAL IGUAL EXPRESION:b     {:  RESULT = new Relacionales(a, b, OperadoresRelacionales.EQUALS, aleft, aright);  :}%prec EQUALS
            | EXPRESION:a DIFERENTE EXPRESION:b     {:  RESULT = new Relacionales(a, b, OperadoresRelacionales.DIFERENTE, aleft, aright);  :}%prec DIFERENTE
            | EXPRESION:a MENORIGUAL EXPRESION:b     {:  RESULT = new Relacionales(a, b, OperadoresRelacionales.MENORIGUAL, aleft, aright);  :}
            | EXPRESION:a MAYORIGUAL EXPRESION:b     {:  RESULT = new Relacionales(a, b, OperadoresRelacionales.MAYORIGUAL, aleft, aright);  :}
            | EXPRESION:a MENOR EXPRESION:b     {:  RESULT = new Relacionales(a, b, OperadoresRelacionales.MENOR, aleft, aright);  :}
            | EXPRESION:a MAYOR EXPRESION:b     {:  RESULT = new Relacionales(a, b, OperadoresRelacionales.MAYOR, aleft, aright);  :}
            | NOT EXPRESION:a                    {:  RESULT = new Logicos(a, OperadoresLogicos.NOT, aleft, aright);  :}%prec NOT
            | EXPRESION:a XOR EXPRESION:b       {:  RESULT = new Logicos(a, b, OperadoresLogicos.XOR, aleft, aright);  :}%prec XOR
            | EXPRESION:a AND EXPRESION:b       {:  RESULT = new Logicos(a, b, OperadoresLogicos.AND, aleft, aright);  :}%prec AND
            | EXPRESION:a OR EXPRESION:b        {:  RESULT = new Logicos(a, b, OperadoresLogicos.OR, aleft, aright);  :}%prec OR
            | LLAMADA:a                         {:  RESULT = a;  :}
            | LENGHTT:a                         {:  RESULT = a;  :}
            | ENTERO:a      {:  RESULT = new Nativo(Integer.parseInt(a), new Tipo(tipoDato.ENTERO), aleft, aright);  :} 
            | DECIMAL:a     {:  RESULT = new Nativo(new Double(a), new Tipo(tipoDato.DECIMAL), aleft, aright);  :}
            | CADENA:a      {:  RESULT = new Nativo(a, new Tipo(tipoDato.CADENA), aleft, aright);  :}
            | CARACTER:a    {:  RESULT = new Nativo(a, new Tipo(tipoDato.CARACTER), aleft, aright);  :}
            | TRUE:a        {:   RESULT = new Nativo(true, new Tipo(tipoDato.BOOLEANO), aleft, aright );   :}
            | FALSE:a       {:   RESULT = new Nativo(false, new Tipo(tipoDato.BOOLEANO), aleft, aright );    :}
            | ID:a          {:  RESULT = new AccesoVar(a, aleft, aright);  :}
            | ID:a CORCHETE1 EXPRESION:b CORCHETE2  {:  RESULT = new AccesoVec(a, b, aleft, aright);  :}
            | PAR1 EXPRESION:a PAR2             {:  RESULT = a;  :}
;