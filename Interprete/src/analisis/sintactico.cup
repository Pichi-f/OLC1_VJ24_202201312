package analisis;

// Importaciones
import java_cup.runtime.Symbol;
import java.util.LinkedList;
import abstracto.Instruccion;
import simbolo.Tipo;
import simbolo.tipoDato;
import excepciones.Errores;


// Instrucciones
import instrucciones.Print;
import instrucciones.Declaracion;
import instrucciones.AsignacionVar;
import instrucciones.If;
import instrucciones.For;
import instrucciones.Break;

// Expresiones
import expresiones.Nativo;
import expresiones.Aritmeticas;
import expresiones.OperadoresAritmeticos;
import expresiones.Relacionales;
import expresiones.OperadoresRelacionales;
import expresiones.AccesoVar;
import expresiones.Logicos;
import expresiones.OperadoresLogicos;

// Parser
parser code
{:
    scanner s;
    parser(scanner s){this.s = s;}

    public LinkedList<Errores> listaErrores = new LinkedList<>();
    
    public void syntax_error(Symbol s){
        listaErrores.add(new Errores("SINTACTICO RECUPERABLE", "No se esperaba el componente " + s.value, s.left, s.right));
    }

    public void unrecovered_syntax_error (Symbol s){
        listaErrores.add(new Errores("SINTACTICO NO RECUPERABLE", "No se esperaba el componente " + s.value, s.left, s.right));
    }

:}

action code
{:
:}

// Terminales
terminal String CADENA, ENTERO, DECIMAL, ID, CARACTER;
terminal FINCADENA, IMPRIMIR, INT, DOUBLE, STRING;
terminal PAR1, PAR2, MAS, MENOS, UMENOS, MULTIPLICACION, DIVISION, POTENCIA, MODULO, DOSPUNTOS;
terminal IGUAL, EQUALS, DIFERENTE; 
terminal String CONST, VAR;
terminal TRUE, FALSE, IF, BOOL;
terminal LLAVE1, LLAVE2;
terminal FOR, MENOR, MAYOR, MENORIGUAL, MAYORIGUAL;
terminal String BREAK;
terminal OR, AND, XOR ,NOT;

// No terminales
nonterminal LinkedList<Instruccion> INICIO, INSTRUCCIONES;
nonterminal Instruccion INSTRUCCION;
nonterminal Instruccion IMPRESION, DECLARACION, ASIGNACION;
nonterminal Instruccion SIF;
nonterminal Instruccion CFOR, ACTUALIZA_FOR;
nonterminal Instruccion BREAKK;
nonterminal Tipo TIPOS;
nonterminal Instruccion EXPRESION;
nonterminal String MUTABILIDAD;

precedence left OR;
precedence left AND;
precedence left XOR;
precedence left NOT;
precedence left EQUALS, MENOR, MAYOR, DIFERENTE, MENORIGUAL, MAYORIGUAL;
precedence left MAS, MENOS;
precedence left MULTIPLICACION, DIVISION, MODULO;
precedence nonassoc POTENCIA;
precedence left UMENOS;

start with INICIO;

INICIO ::= INSTRUCCIONES:a    {:  RESULT = a;  :}
;

INSTRUCCIONES ::= INSTRUCCIONES:a INSTRUCCION:b     {:  RESULT = a; RESULT.add(b);  :}
                | INSTRUCCION:a                     {:  RESULT = new LinkedList<>(); RESULT.add(a);  :}
;

INSTRUCCION ::= IMPRESION:a         {:  RESULT = a;  :}
                | DECLARACION:a     {:  RESULT = a;  :}
                | ASIGNACION:a      {:  RESULT = a;  :}
                | SIF:a             {:   RESULT=a;   :}
                | CFOR:a            {:   RESULT=a;   :}
                | BREAKK:a          {:   RESULT=a;   :}
                | error FINCADENA  
;

IMPRESION ::= IMPRIMIR PAR1 EXPRESION:a PAR2 FINCADENA      {:  RESULT = new Print(a, aleft, aright);  :}
;

DECLARACION ::= MUTABILIDAD:m ID:b DOSPUNTOS TIPOS:a IGUAL EXPRESION:c FINCADENA    {:  RESULT = new Declaracion(m, b, c, a, aleft, aright);  :}
;

MUTABILIDAD ::= CONST     {:  RESULT = "CONST";  :}
                | VAR      {:  RESULT = "VAR";  :}
;

ASIGNACION ::= ID:a IGUAL EXPRESION:b FINCADENA  {:   RESULT=new AsignacionVar(a, b, aleft, aright);  :}
;

SIF ::= IF PAR1 EXPRESION:a PAR2 LLAVE1 INSTRUCCIONES:b LLAVE2  {:   RESULT = new If(a, b, aleft, aright);   :}
;

CFOR ::= FOR PAR1 ASIGNACION:a EXPRESION:b FINCADENA ACTUALIZA_FOR:c PAR2 LLAVE1 INSTRUCCIONES:d LLAVE2     {:   RESULT = new For(a, b, c, d, aleft, aright);   :}
;

ACTUALIZA_FOR ::= ID:a IGUAL EXPRESION:b {:   RESULT=new AsignacionVar(a, b, aleft, aright);  :}
;

BREAKK ::= BREAK:a FINCADENA      {:    RESULT = new Break(aleft, aright);     :}
;

TIPOS ::= INT     {:  RESULT = new Tipo(tipoDato.ENTERO);  :}
        | DOUBLE  {:  RESULT = new Tipo(tipoDato.DECIMAL);  :}
        | STRING  {:  RESULT = new Tipo(tipoDato.CADENA);  :}
        | BOOL    {:  RESULT = new Tipo(tipoDato.BOOLEANO);  :}
;

EXPRESION ::= MENOS EXPRESION:a                 {:  RESULT = new Aritmeticas(a, OperadoresAritmeticos.NEGACION, aleft, aright);  :} %prec UMENOS
            | EXPRESION:a MODULO EXPRESION:b    {:  RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.MODULO, aleft, aright);  :}
            | EXPRESION:a POTENCIA EXPRESION:b  {:  RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.POTENCIA, aleft, aright);  :}
            | EXPRESION:a DIVISION EXPRESION:b  {:  RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.DIVISION, aleft, aright);  :}
            | EXPRESION:a MULTIPLICACION EXPRESION:b  {:  RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.MULTIPLICACION, aleft, aright);  :}
            | EXPRESION:a MAS EXPRESION:b       {:  RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.SUMA, aleft, aright);  :}
            | EXPRESION:a MENOS EXPRESION:b     {:  RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.RESTA, aleft, aright);  :}
            | EXPRESION:a IGUAL IGUAL EXPRESION:b     {:  RESULT = new Relacionales(a, b, OperadoresRelacionales.EQUALS, aleft, aright);  :}%prec EQUALS
            | EXPRESION:a DIFERENTE EXPRESION:b     {:  RESULT = new Relacionales(a, b, OperadoresRelacionales.DIFERENTE, aleft, aright);  :}%prec DIFERENTE
            | EXPRESION:a MENORIGUAL EXPRESION:b     {:  RESULT = new Relacionales(a, b, OperadoresRelacionales.MENORIGUAL, aleft, aright);  :}
            | EXPRESION:a MAYORIGUAL EXPRESION:b     {:  RESULT = new Relacionales(a, b, OperadoresRelacionales.MAYORIGUAL, aleft, aright);  :}
            | EXPRESION:a MENOR EXPRESION:b     {:  RESULT = new Relacionales(a, b, OperadoresRelacionales.MENOR, aleft, aright);  :}
            | EXPRESION:a MAYOR EXPRESION:b     {:  RESULT = new Relacionales(a, b, OperadoresRelacionales.MAYOR, aleft, aright);  :}
            | EXPRESION:a OR EXPRESION:b        {:  RESULT = new Logicos(a, b, OperadoresLogicos.OR, aleft, aright);  :}%prec OR
            | EXPRESION:a AND EXPRESION:b       {:  RESULT = new Logicos(a, b, OperadoresLogicos.AND, aleft, aright);  :}%prec AND
            | EXPRESION:a XOR EXPRESION:b       {:  RESULT = new Logicos(a, b, OperadoresLogicos.XOR, aleft, aright);  :}%prec XOR
            | NOT EXPRESION:a                    {:  RESULT = new Logicos(a, OperadoresLogicos.NOT, aleft, aright);  :}%prec NOT
            | ENTERO:a      {:  RESULT = new Nativo(Integer.parseInt(a), new Tipo(tipoDato.ENTERO), aleft, aright);  :} 
            | DECIMAL:a     {:  RESULT = new Nativo(new Double(a), new Tipo(tipoDato.DECIMAL), aleft, aright);  :}
            | CADENA:a      {:  RESULT = new Nativo(a, new Tipo(tipoDato.CADENA), aleft, aright);  :}
            | CARACTER:a    {:  RESULT = new Nativo(a, new Tipo(tipoDato.CARACTER), aleft, aright);  :}
            | TRUE:a        {:   RESULT = new Nativo(true, new Tipo(tipoDato.BOOLEANO), aleft, aright );   :}
            | FALSE:a       {:   RESULT = new Nativo(false, new Tipo(tipoDato.BOOLEANO), aleft, aright );    :}
            | ID:a          {:  RESULT = new AccesoVar(a, aleft, aright);  :}
            | PAR1 EXPRESION:a PAR2             {:  RESULT = a;  :}
;